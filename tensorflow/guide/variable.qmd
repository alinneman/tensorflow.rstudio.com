---
title: Introduction to Variables
---

##### Copyright 2020 The TensorFlow Authors.

```{r}
#@title Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
```

A TensorFlow **variable** is the recommended way to represent shared,
persistent state your program manipulates. This guide covers how to
create, update, and manage instances of `tf$Variable` in TensorFlow.

Variables are created and tracked via the `tf$Variable` class. A
`tf$Variable` represents a tensor whose value can be changed by running
ops on it. Specific ops allow you to read and modify the values of this
tensor. Higher level libraries like `tf$keras` use `tf$Variable` to
store model parameters.

## Setup

This notebook discusses variable placement. If you want to see on what
device your variables are placed, uncomment this line.

```{r setup}
library(tensorflow)

# Uncomment to see where your variables get placed (see below)
# tf$debugging$set_log_device_placement(TRUE)
```

## Create a variable

To create a variable, provide an initial value. The `tf$Variable` will
have the same `dtype` as the initialization value.

```{r}
my_tensor <- as_tensor(1:4, "float32", shape = c(2, 2))
(my_variable <- tf$Variable(my_tensor))

# Variables can be all kinds of types, just like tensors

(bool_variable <- tf$Variable(c(FALSE, FALSE, FALSE, TRUE)))
(complex_variable <- tf$Variable(c(5 + 4i, 6 + 1i)))
```

A variable looks and acts like a tensor, and, in fact, is a data
structure backed by a `tf$Tensor`. Like tensors, they have a `dtype` and
a shape, and can be exported to regular R arrays.

```{r}
cat("Shape: "); my_variable$shape
cat("DType: "); my_variable$dtype
cat("As R array: "); str(as.array(my_variable))
```

Most tensor operations work on variables as expected, although variables
cannot be reshaped.

```{r}
message("A variable: ")
my_variable

message("Viewed as a tensor: ")
as_tensor(my_variable)

message("Index of highest value: ")
tf$math$argmax(my_variable)

# This creates a new tensor; it does not reshape the variable.
message("Copying and reshaping: ") 
tf$reshape(my_variable, c(1L, 4L))
```

As noted above, variables are backed by tensors. You can reassign the
tensor using `tf$Variable$assign`. Calling `assign` does not (usually)
allocate a new tensor; instead, the existing tensor's memory is reused.

```{r}
a <- tf$Variable(c(2, 3))

# assigning allowed, input is automatically 
# cast to the dtype of the Variable, float32
a$assign(as.integer(c(1, 2)))

# resize the variable is not allowed
try(a$assign(c(1.0, 2.0, 3.0)))
```

If you use a variable like a tensor in operations, you will usually
operate on the backing tensor.

Creating new variables from existing variables duplicates the backing
tensors. Two variables will not share the same memory.

```{r}
a <- tf$Variable(c(2, 3))
# Create b based on the value of a

b <- tf$Variable(a)
a$assign(c(5, 6))

# a and b are different

as.array(a)
as.array(b)

# There are other versions of assign

as.array(a$assign_add(c(2,3))) # c(7, 9)
as.array(a$assign_sub(c(7,9))) # c(0, 0)
```

## Lifecycles, naming, and watching

In TensorFlow, `tf$Variable` instance have the same lifecycle as other R
objects. When there are no references to a variable it is automatically
deallocated (garbage-collected).

Variables can also be named which can help you track and debug them. You
can give two variables the same name.

```{r}
# Create a and b; they will have the same name but will be backed by
# different tensors.

a <- tf$Variable(my_tensor, name = "Mark")
# A new variable with the same name, but different value

# Note that the scalar add `+` is broadcast
b <- tf$Variable(my_tensor + 1, name = "Mark")

# These are elementwise-unequal, despite having the same name
print(a == b)
```

Variable names are preserved when saving and loading models. By default,
variables in models will acquire unique variable names automatically, so
you don't need to assign them yourself unless you want to.

Although variables are important for differentiation, some variables
will not need to be differentiated. You can turn off gradients for a
variable by setting `trainable` to false at creation. An example of a
variable that would not need gradients is a training step counter.

```{r}
(step_counter <- tf$Variable(1L, trainable = FALSE))
```

## Placing variables and tensors

For better performance, TensorFlow will attempt to place tensors and
variables on the fastest device compatible with its `dtype`. This means
most variables are placed on a GPU if one is available.

However, you can override this. In this snippet, place a float tensor
and a variable on the CPU, even if a GPU is available. By turning on
device placement logging (see above), you can see where the variable is
placed.

Note: Although manual placement works, using [distribution
strategies](distributed_training.qmd) can be a more convenient and
scalable way to optimize your computation.

If you run this notebook on different backends with and without a GPU
you will see different logging. *Note that logging device placement must
be turned on at the start of the session.*

```{r}
with(tf$device('CPU:0'), {
  # Create some tensors
  a <- tf$Variable(array(1:6, c(2, 3)), dtype = "float32")
  b <- as_tensor(array(1:6, c(3, 2)), dtype = "float32")
  c <- tf$matmul(a, b)
})

c
```

It's possible to set the location of a variable or tensor on one device
and do the computation on another device. This will introduce delay, as
data needs to be copied between the devices.

You might do this, however, if you had multiple GPU workers but only
want one copy of the variables.

```{r}
with(tf$device('CPU:0'), {
  a <- tf$Variable(array(1:6, c(2, 3)), dtype = "float32")
  b <- tf$Variable(array(1:3, c(1, 3)), dtype = "float32")
})

with(tf$device('GPU:0'), {
  # Element-wise multiply
  k <- a * b
})

k
```

Note: Because `tf$config$set_soft_device_placement()` is turned on by
default, even if you run this code on a device without a GPU, it will
still run. The multiplication step will happen on the CPU.

For more on distributed training, refer to the
[guide](distributed_training$qmd).

## Next steps

To understand how variables are typically used, see our guide on
[automatic differentiation](autodiff.qmd).
