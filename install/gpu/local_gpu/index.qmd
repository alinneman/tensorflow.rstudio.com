---
title: "Local GPU"
output: 
  html_document:
    toc_depth: 3
    toc_float:
        collapsed: false
type: docs
menu:
  main:
    name: "Local GPU"
    identifier: "tools-local-gpu"
    parent: "installation-gpu"
    weight: 20
aliases:
  - /installation_gpu.html
  - /tensorflow/installation_gpu.html
  - /tensorflow/articles/installation_gpu.html
  - /tools/installation_gpu.html
  - /tools/local_gpu
  - /tools/local_gpu.html
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, eval = FALSE)
```

## Overview

TensorFlow can be configured to run on either CPUs or GPUs. By default,
TensorFlow will use a GPU if it is available and the appropriate drivers
are installed, and otherwise fallback to using the CPU only.

The prerequisites for the GPU version of TensorFlow on each platform are
covered below. Note that on all platforms you must be running an NVIDIA®
GPU with CUDA® Compute Capability 3.5 or higher. See the list of
[CUDA-enabled GPU cards](https://developer.nvidia.com/cuda-gpus).

## Prerequisties

### Windows

This article describes how to detect whether your graphics card uses an
NVIDIA® GPU:

<http://nvidia.custhelp.com/app/answers/detail/a_id/2040/~/identifying-the-graphics-card-model-and-device-id-in-a-pc>

Once you've confirmed that you have an NVIDIA® GPU, the following
article describes how to install required software components including
the CUDA Toolkit v11.2 and cuDNN 8.1:

<https://www.tensorflow.org/install/gpu#hardware_requirements>

Note that the documentation on installation of the last component
(cuDNN) is a bit sparse. Once you join the NVIDIA® developer program and
download the zip file containing cuDNN you need to extract the zip file
and add the location where you extracted it to your system PATH.

### Ubuntu

The specifics of installing required software differ by Linux version so
please review the NVIDIA® documentation carefully to ensure you install
everything correctly.

The following section provides as example of the installation commands
you might use on Ubuntu 20.04.

#### Ubuntu 20.04 Example

First, install
[CUDA 11.2](https://developer.nvidia.com/cuda-11.2.2-download-archive) and [cuDNN 8.1](https://developer.nvidia.com/rdp/cudnn-archive). The
instructions for Ubuntu 20.04 are reproduced here, for other platforms
consult the links:

``` bash
wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-ubuntu2004.pin
sudo mv cuda-ubuntu2004.pin /etc/apt/preferences.d/cuda-repository-pin-600
sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/7fa2af80.pub
sudo add-apt-repository "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/ /"
sudo apt-get update
sudo apt-get -y install cuda-11-2 libcudnn8=8.1.1.33-1+cuda11.2
sudo apt-mark hold libcudnn8
```



### Mac OS X

Tensorflow does not support GPUs on Intel Macs. Apple however provides a
separate build of Tensorflow that works on Arm Macs like the M1.
`install_tensorflow()` will detect if it is being run on an Arm Mac and
install the appropriate Python packages (`tensorflow-macos` and
`tensorflow-metal`). Note that on M1 Macs, conda is the only supported
installation method. You can easily install a conda Python like this:

```{r}
reticulate::install_miniconda()
tensorflow::install_tensorflow()
```

Note that `install_miniconda()` automatically creates a conda
environment named `r-reticulate`, that is the default environment used
by reticulate.
