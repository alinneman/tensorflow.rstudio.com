---
format:
  html:
    css: /reference/assets/reference.css
---

| <button class="button"> ![](/reference/assets/GitHub-Mark-32px.png){width="20"} [View source on GitHub](https://github.com/rstudio/keras//blob/main/R/layers-recurrent.R) </button> | <button class="button"> ![](/reference/assets/GitHub-Mark-32px.png){width="20"} [Suggest edits on GitHub](https://github.com/rstudio/keras//edit/main/R/layers-recurrent.R) </button> |
|:------------------------------:|:--------------------------------------:|

*R/layers-recurrent.R*

# layer_cudnn_lstm

## (Deprecated) Fast LSTM implementation backed by [CuDNN](https://developer.nvidia.com/cudnn).

## Description
Can only be run on GPU, with the TensorFlow backend. 


## Usage
```r
layer_cudnn_lstm( 
  object, 
  units, 
  kernel_initializer = "glorot_uniform", 
  recurrent_initializer = "orthogonal", 
  bias_initializer = "zeros", 
  unit_forget_bias = TRUE, 
  kernel_regularizer = NULL, 
  recurrent_regularizer = NULL, 
  bias_regularizer = NULL, 
  activity_regularizer = NULL, 
  kernel_constraint = NULL, 
  recurrent_constraint = NULL, 
  bias_constraint = NULL, 
  return_sequences = FALSE, 
  return_state = FALSE, 
  stateful = FALSE, 
  input_shape = NULL, 
  batch_input_shape = NULL, 
  batch_size = NULL, 
  dtype = NULL, 
  name = NULL, 
  trainable = NULL, 
  weights = NULL 
) 
```

## Arguments
|Arguments|Description|
|---|---|
| object | What to compose the new `Layer` instance with. Typically a Sequential model or a Tensor (e.g., as returned by `layer_input()`). The return value depends on `object`. If `object` is: <br>- missing or `NULL`, the `Layer` instance is returned. <br>- a `Sequential` model, the model with an additional layer is returned. <br>- a Tensor, the output tensor from `layer_instance(object)` is returned.  |
| units | Positive integer, dimensionality of the output space. |
| kernel_initializer | Initializer for the `kernel` weights matrix, used for the linear transformation of the inputs. |
| recurrent_initializer | Initializer for the `recurrent_kernel` weights matrix, used for the linear transformation of the recurrent state. |
| bias_initializer | Initializer for the bias vector. |
| unit_forget_bias | Boolean. If TRUE, add 1 to the bias of the forget gate at initialization. Setting it to true will also force `bias_initializer="zeros"`. This is recommended in [Jozefowicz et al.](https://proceedings.mlr.press/v37/jozefowicz15.pdf) |
| kernel_regularizer | Regularizer function applied to the `kernel`<br>weights matrix. |
| recurrent_regularizer | Regularizer function applied to the `recurrent_kernel` weights matrix. |
| bias_regularizer | Regularizer function applied to the bias vector. |
| activity_regularizer | Regularizer function applied to the output of the layer (its "activation").. |
| kernel_constraint | Constraint function applied to the `kernel` weights matrix. |
| recurrent_constraint | Constraint function applied to the `recurrent_kernel` weights matrix. |
| bias_constraint | Constraint function applied to the bias vector. |
| return_sequences | Boolean. Whether to return the last output in the output sequence, or the full sequence. |
| return_state | Boolean (default FALSE). Whether to return the last state in addition to the output. |
| stateful | Boolean (default FALSE). If TRUE, the last state for each sample at index i in a batch will be used as initial state for the sample of index i in the following batch. |
| input_shape | Dimensionality of the input (integer) not including the samples axis. This argument is required when using this layer as the first layer in a model. |
| batch_input_shape | Shapes, including the batch size. For instance, `batch_input_shape=c(10, 32)` indicates that the expected input will be batches of 10 32-dimensional vectors. `batch_input_shape=list(NULL, 32)`<br>indicates batches of an arbitrary number of 32-dimensional vectors. |
| batch_size | Fixed batch size for layer |
| dtype | The data type expected by the input, as a string (`float32`, `float64`, `int32`...) |
| name | An optional name string for the layer. Should be unique in a model (do not reuse the same name twice). It will be autogenerated if it isn't provided. |
| trainable | Whether the layer weights will be updated during training. |
| weights | Initial weights for layer. |


## Section

## References

- [Long short-term memory](http://www.bioinf.jku.at/publications/older/2604.pdf) (original 1997 paper) 

- [Supervised sequence labeling with recurrent neural networks](https://www.cs.toronto.edu/~graves/preprint.pdf)

- [A Theoretically Grounded Application of Dropout in Recurrent Neural Networks](https://arxiv.org/abs/1512.05287)




## See Also
Other recurrent layers:  `layer_cudnn_gru()`, `layer_gru()`, `layer_lstm()`, `layer_rnn()`, `layer_simple_rnn()`

