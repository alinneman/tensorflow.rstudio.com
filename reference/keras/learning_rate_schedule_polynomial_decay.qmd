---
format:
  html:
    css: /reference/assets/reference.css
---

| <button class="button"> ![](/reference/assets/GitHub-Mark-32px.png){width="20"} [View source on GitHub](https://github.com/rstudio/keras//blob/main/R/learning_rate_schedules.R) </button> | <button class="button"> ![](/reference/assets/GitHub-Mark-32px.png){width="20"} [Suggest edits on GitHub](https://github.com/rstudio/keras//edit/main/R/learning_rate_schedules.R) </button> |
|:------------------------------:|:--------------------------------------:|

*R/learning_rate_schedules.R*

# learning_rate_schedule_polynomial_decay

## A LearningRateSchedule that uses a polynomial decay schedule

## Description
A LearningRateSchedule that uses a polynomial decay schedule 


## Usage
```r
learning_rate_schedule_polynomial_decay( 
  initial_learning_rate, 
  decay_steps, 
  end_learning_rate = 1e-04, 
  power = 1, 
  cycle = FALSE, 
  ..., 
  name = NULL 
) 
```

## Arguments
|Arguments|Description|
|---|---|
| initial_learning_rate | A scalar `float32` or `float64` `Tensor` or an R number.  The initial learning rate. |
| decay_steps | A scalar `int32` or `int64` `Tensor` or an R number. Must be positive.  See the decay computation above. |
| end_learning_rate | A scalar `float32` or `float64` `Tensor` or an R number.  The minimal end learning rate. |
| power | A scalar `float32` or `float64` `Tensor` or an R number. The power of the polynomial. Defaults to linear, 1.0. |
| cycle | A boolean, whether or not it should cycle beyond decay_steps. |
| ... | For backwards and forwards compatibility |
| name | String.  Optional name of the operation. Defaults to 'PolynomialDecay'. |

## Details

It is commonly observed that a monotonically decreasing learning rate, whose degree of change is carefully chosen, results in a better performing model. This schedule applies a polynomial decay function to an optimizer step, given a provided `initial_learning_rate`, to reach an `end_learning_rate`

in the given `decay_steps`. 

It requires a `step` value to compute the decayed learning rate. You can just pass a TensorFlow variable that you increment at each training step. 

The schedule is a 1-arg callable that produces a decayed learning rate when passed the current optimizer step. This can be useful for changing the learning rate value across different invocations of optimizer functions. It is computed as: 

```

decayed_learning_rate <- function(step) { 

  step <- min(step, decay_steps) 

  ((initial_learning_rate - end_learning_rate) * 

      (1 - step / decay_steps) ^ (power) 

    ) + end_learning_rate 

} 

```

If `cycle` is `TRUE` then a multiple of `decay_steps` is used, the first one that is bigger than `step`. 

```

decayed_learning_rate <- function(step) { 

  decay_steps <- decay_steps * ceiling(step / decay_steps) 

  ((initial_learning_rate - end_learning_rate) * 

      (1 - step / decay_steps) ^ (power) 

    ) + end_learning_rate 

} 

```

You can pass this schedule directly into a keras Optimizer as the `learning_rate`. 

Example: Fit a model while decaying from 0.1 to 0.01 in 10000 steps using sqrt (i.e. power=0.5): 

```

... 

starter_learning_rate <- 0.1 

end_learning_rate <- 0.01 

decay_steps <- 10000 

learning_rate_fn <- learning_rate_schedule_polynomial_decay( 

  starter_learning_rate, decay_steps, end_learning_rate, power = 0.5) 

model %>% 

  compile(optimizer = optimizer_sgd(learning_rate = learning_rate_fn), 

          loss = 'sparse_categorical_crossentropy', 

          metrics = 'accuracy') 

model %>% fit(data, labels, epochs = 5) 

```





## See Also
- [https://www.tensorflow.org/api_docs/python/tf/keras/optimizers/schedules/PolynomialDecay](https://www.tensorflow.org/api_docs/python/tf/keras/optimizers/schedules/PolynomialDecay)

