---
format:
  html:
    css: /reference/assets/reference.css
---

| <button class="button"> ![](/reference/assets/GitHub-Mark-32px.png){width="20"} [View source on GitHub](https://github.com/rstudio/keras//blob/main/R/layers-recurrent.R) </button> | <button class="button"> ![](/reference/assets/GitHub-Mark-32px.png){width="20"} [Suggest edits on GitHub](https://github.com/rstudio/keras//edit/main/R/layers-recurrent.R) </button> |
|:------------------------------:|:--------------------------------------:|

*R/layers-recurrent.R*

# layer_gru

## Gated Recurrent Unit - Cho et al.

## Description
There are two variants. The default one is based on 1406.1078v3 and has reset gate applied to hidden state before matrix multiplication. The other one is based on original 1406.1078v1 and has the order reversed. 


## Usage
```r
layer_gru( 
  object, 
  units, 
  activation = "tanh", 
  recurrent_activation = "sigmoid", 
  use_bias = TRUE, 
  return_sequences = FALSE, 
  return_state = FALSE, 
  go_backwards = FALSE, 
  stateful = FALSE, 
  unroll = FALSE, 
  time_major = FALSE, 
  reset_after = TRUE, 
  kernel_initializer = "glorot_uniform", 
  recurrent_initializer = "orthogonal", 
  bias_initializer = "zeros", 
  kernel_regularizer = NULL, 
  recurrent_regularizer = NULL, 
  bias_regularizer = NULL, 
  activity_regularizer = NULL, 
  kernel_constraint = NULL, 
  recurrent_constraint = NULL, 
  bias_constraint = NULL, 
  dropout = 0, 
  recurrent_dropout = 0, 
  ... 
) 
```

## Arguments
|Arguments|Description|
|---|---|
| object | What to compose the new `Layer` instance with. Typically a Sequential model or a Tensor (e.g., as returned by `layer_input()`). The return value depends on `object`. If `object` is: <br>- missing or `NULL`, the `Layer` instance is returned. <br>- a `Sequential` model, the model with an additional layer is returned. <br>- a Tensor, the output tensor from `layer_instance(object)` is returned.  |
| units | Positive integer, dimensionality of the output space. |
| activation | Activation function to use. Default: hyperbolic tangent (`tanh`). If you pass `NULL`, no activation is applied (ie. "linear" activation: `a(x) = x`). |
| recurrent_activation | Activation function to use for the recurrent step. |
| use_bias | Boolean, whether the layer uses a bias vector. |
| return_sequences | Boolean. Whether to return the last output in the output sequence, or the full sequence. |
| return_state | Boolean (default FALSE). Whether to return the last state in addition to the output. |
| go_backwards | Boolean (default FALSE). If TRUE, process the input sequence backwards and return the reversed sequence. |
| stateful | Boolean (default FALSE). If TRUE, the last state for each sample at index i in a batch will be used as initial state for the sample of index i in the following batch. |
| unroll | Boolean (default FALSE). If TRUE, the network will be unrolled, else a symbolic loop will be used. Unrolling can speed-up a RNN, although it tends to be more memory-intensive. Unrolling is only suitable for short sequences. |
| time_major | If True, the inputs and outputs will be in shape `[timesteps, batch, feature]`, whereas in the False case, it will be `[batch, timesteps, feature]`. Using `time_major = TRUE` is a bit more efficient because it avoids transposes at the beginning and end of the RNN calculation. However, most TensorFlow data is batch-major, so by default this function accepts input and emits output in batch-major form. |
| reset_after | GRU convention (whether to apply reset gate after or before matrix multiplication). FALSE = "before" (default), TRUE = "after" (CuDNN compatible). |
| kernel_initializer | Initializer for the `kernel` weights matrix, used for the linear transformation of the inputs. |
| recurrent_initializer | Initializer for the `recurrent_kernel` weights matrix, used for the linear transformation of the recurrent state. |
| bias_initializer | Initializer for the bias vector. |
| kernel_regularizer | Regularizer function applied to the `kernel`<br>weights matrix. |
| recurrent_regularizer | Regularizer function applied to the `recurrent_kernel` weights matrix. |
| bias_regularizer | Regularizer function applied to the bias vector. |
| activity_regularizer | Regularizer function applied to the output of the layer (its "activation").. |
| kernel_constraint | Constraint function applied to the `kernel` weights matrix. |
| recurrent_constraint | Constraint function applied to the `recurrent_kernel` weights matrix. |
| bias_constraint | Constraint function applied to the bias vector. |
| dropout | Float between 0 and 1. Fraction of the units to drop for the linear transformation of the inputs. |
| recurrent_dropout | Float between 0 and 1. Fraction of the units to drop for the linear transformation of the recurrent state. |
| ... | Standard Layer args. |

## Details
The second variant is compatible with CuDNNGRU (GPU-only) and allows inference on CPU. Thus it has separate biases for `kernel` and `recurrent_kernel`. Use `reset_after = TRUE` and `recurrent_activation = "sigmoid"`. 

## Section

## Input shapes

N-D tensor with shape `(batch_size, timesteps, ...)`, or `(timesteps, batch_size, ...)` when `time_major = TRUE`. 

## Output shape

- if `return_state`: a list of tensors. The first tensor is the output. The remaining tensors are the last states, each with shape `(batch_size, state_size)`, where `state_size`

could be a high dimension tensor shape. 

- if `return_sequences`: N-D tensor with shape `[batch_size, timesteps, output_size]`, where `output_size` could be a high dimension tensor shape, or `[timesteps, batch_size, output_size]` when `time_major` is `TRUE`

- else, N-D tensor with shape `[batch_size, output_size]`, where `output_size` could be a high dimension tensor shape. 

## Masking

This layer supports masking for input data with a variable number of timesteps. To introduce masks to your data, use `layer_embedding()` with the `mask_zero` parameter set to `TRUE`. 

## Statefulness in RNNs

You can set RNN layers to be 'stateful', which means that the states computed for the samples in one batch will be reused as initial states for the samples in the next batch. This assumes a one-to-one mapping between samples in different successive batches. 

For intuition behind statefulness, there is a helpful blog post here: [https://philipperemy.github.io/keras-stateful-lstm/](https://philipperemy.github.io/keras-stateful-lstm/)

To enable statefulness: 

- Specify `stateful = TRUE` in the layer constructor. 

- Specify a fixed batch size for your model. For sequential models, pass `batch_input_shape = list(...)` to the first layer in your model. For functional models with 1 or more Input layers, pass `batch_shape = list(...)` to all the first layers in your model. This is the expected shape of your inputs **including the batch size**. It should be a list of integers, e.g. `list(32, 10, 100)`. For dimensions which can vary (are not known ahead of time), use `NULL` in place of an integer, e.g. `list(32, NULL, NULL)`. 

- Specify `shuffle = FALSE` when calling `fit()`. 

To reset the states of your model, call `layer$reset_states()` on either a specific layer, or on your entire model. 

## Initial State of RNNs

You can specify the initial state of RNN layers symbolically by calling them with the keyword argument `initial_state.` The value of initial_state should be a tensor or list of tensors representing the initial state of the RNN layer. 

You can specify the initial state of RNN layers numerically by calling `reset_states` with the named argument `states.` The value of `states` should be an array or list of arrays representing the initial state of the RNN layer. 

## Passing external constants to RNNs

You can pass "external" constants to the cell using the `constants` named argument of `RNN$__call__` (as well as `RNN$call`) method. This requires that the `cell$call` method accepts the same keyword argument `constants`. Such constants can be used to condition the cell transformation on additional static inputs (not changing over time), a.k.a. an attention mechanism. 

## References

- [Learning Phrase Representations using RNN Encoder-Decoder for Statistical Machine Translation](https://arxiv.org/abs/1406.1078)

- [On the Properties of Neural Machine Translation: Encoder-Decoder Approaches](https://arxiv.org/abs/1409.1259)

- [Empirical Evaluation of Gated Recurrent Neural Networks on Sequence Modeling](https://arxiv.org/abs/1412.3555v1)

- [A Theoretically Grounded Application of Dropout in Recurrent Neural Networks](https://arxiv.org/abs/1512.05287)




## See Also

- [https://www.tensorflow.org/guide/keras/rnn](https://www.tensorflow.org/guide/keras/rnn)

Other recurrent layers:  `layer_cudnn_gru()`, `layer_cudnn_lstm()`, `layer_lstm()`, `layer_rnn()`, `layer_simple_rnn()`

