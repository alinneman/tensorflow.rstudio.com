---
format:
  html:
    css: /reference/assets/reference.css
---

| <button class="button"> ![](/reference/assets/GitHub-Mark-32px.png){width="20"} [View source on GitHub](https://github.com/rstudio/keras//blob/main/R/layer-methods.R#L31) </button> |
|:------------------------------:|:--------------------------------------:|

# get_config

## Layer/Model configuration

## Description
A layer config is an object returned from `get_config()` that contains the configuration of a layer or model. The same layer or model can be reinstantiated later (without its trained weights) from this configuration using `from_config()`. The config does not include connectivity information, nor the class name (those are handled externally). 


## Usage
```r
get_config(object) 

from_config(config, custom_objects = NULL) 
```

## Arguments
|Arguments|Description|
|---|---|
| object | Layer or model object |
| config | Object with layer or model configuration |
| custom_objects | list of custom objects needed to instantiate the layer, e.g., custom layers defined by `new_layer_class()` or similar. |



## Value
`get_config()` returns an object with the configuration, `from_config()` returns a re-instantiation of the object. 

## Note
Objects returned from `get_config()` are not serializable. Therefore, if you want to save and restore a model across sessions, you can use the `model_to_json()` function (for model configuration only, not weights) or the `save_model_tf()` function to save the model configuration and weights to the filesystem. 


## See Also

Other model functions:  `compile.keras.engine.training.Model()`, `evaluate.keras.engine.training.Model()`, `evaluate_generator()`, `fit.keras.engine.training.Model()`, `fit_generator()`, `get_layer()`, `keras_model_sequential()`, `keras_model()`, `multi_gpu_model()`, `pop_layer()`, `predict.keras.engine.training.Model()`, `predict_generator()`, `predict_on_batch()`, `predict_proba()`, `summary.keras.engine.training.Model()`, `train_on_batch()`

Other layer methods:  `count_params()`, `get_input_at()`, `get_weights()`, `reset_states()`

