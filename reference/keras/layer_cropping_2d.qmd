---
format:
  html:
    css: /reference/assets/reference.css
---

| <button class="button"> ![](/reference/assets/GitHub-Mark-32px.png){width="20"} [View source on GitHub](https://github.com/rstudio/keras//blob/main/R/layers-convolutional.R#L1205) </button> |
|:------------------------------:|:--------------------------------------:|

# layer_cropping_2d

## Cropping layer for 2D input (e.g. picture).

## Description
It crops along spatial dimensions, i.e. width and height. 


## Usage
```r
layer_cropping_2d( 
  object, 
  cropping = list(c(0L, 0L), c(0L, 0L)), 
  data_format = NULL, 
  batch_size = NULL, 
  name = NULL, 
  trainable = NULL, 
  weights = NULL 
) 
```

## Arguments
|Arguments|Description|
|---|---|
| object | What to compose the new `Layer` instance with. Typically a Sequential model or a Tensor (e.g., as returned by `layer_input()`). The return value depends on `object`. If `object` is: <br>- missing or `NULL`, the `Layer` instance is returned. <br>- a `Sequential` model, the model with an additional layer is returned. <br>- a Tensor, the output tensor from `layer_instance(object)` is returned.  |
| cropping | int, or list of 2 ints, or list of 2 lists of 2 ints. <br>- If int: the same symmetric cropping is applied to width and height. <br>- If list of 2 ints: interpreted as two different symmetric cropping values for height and width: `(symmetric_height_crop, symmetric_width_crop)`. <br>- If list of 2 lists of 2 ints: interpreted as `((top_crop, bottom_crop), (left_crop,   right_crop))` |
| data_format | A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs. `channels_last` corresponds to inputs with shape `(batch, height, width, channels)` while `channels_first` corresponds to inputs with shape `(batch, channels, height, width)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be "channels_last". |
| batch_size | Fixed batch size for layer |
| name | An optional name string for the layer. Should be unique in a model (do not reuse the same name twice). It will be autogenerated if it isn't provided. |
| trainable | Whether the layer weights will be updated during training. |
| weights | Initial weights for layer. |


## Section

## Input shape

 4D tensor with shape: 

- If `data_format` is `"channels_last"`: `(batch, rows, cols, channels)`

- If `data_format` is `"channels_first"`: `(batch, channels, rows, cols)`

## Output shape

 4D tensor with shape: 

- If `data_format` is `"channels_last"`: `(batch, cropped_rows, cropped_cols, channels)`

- If `data_format` is `"channels_first"`: `(batch, channels, cropped_rows, cropped_cols)`




## See Also
Other convolutional layers:  `layer_conv_1d_transpose()`, `layer_conv_1d()`, `layer_conv_2d_transpose()`, `layer_conv_2d()`, `layer_conv_3d_transpose()`, `layer_conv_3d()`, `layer_conv_lstm_2d()`, `layer_cropping_1d()`, `layer_cropping_3d()`, `layer_depthwise_conv_1d()`, `layer_depthwise_conv_2d()`, `layer_separable_conv_1d()`, `layer_separable_conv_2d()`, `layer_upsampling_1d()`, `layer_upsampling_2d()`, `layer_upsampling_3d()`, `layer_zero_padding_1d()`, `layer_zero_padding_2d()`, `layer_zero_padding_3d()`

