---
format:
  html:
    css: /reference/assets/reference.css
---

| <button class="button"> ![](/reference/assets/GitHub-Mark-32px.png){width="20"} [View source on GitHub](https://github.com/rstudio/keras//blob/main/R/model.R) </button> | <button class="button"> ![](/reference/assets/GitHub-Mark-32px.png){width="20"} [Suggest edits on GitHub](https://github.com/rstudio/keras//edit/main/R/model.R) </button> |
|:------------------------------:|:--------------------------------------:|

*R/model.R*

# keras_model_sequential

## Keras Model composed of a linear stack of layers

## Description
Keras Model composed of a linear stack of layers 


## Usage
```r
keras_model_sequential(layers = NULL, name = NULL, ...) 
```

## Arguments
|Arguments|Description|
|---|---|
| layers | List of layers to add to the model |
| name | Name of model |
| ... |   Arguments passed on to `sequential_model_input_layer`<br>  <br>    <br>`input_shape`<br>an integer vector of dimensions (not including the batch <br>    <br>`batch_size`<br>Optional input batch size (integer or NULL).<br>    <br>`dtype`<br>Optional datatype of the input. When not provided, the Keras <br>    <br>`input_tensor`<br>Optional tensor to use as layer input. If set, the layer <br>    <br>`sparse`<br>Boolean, whether the placeholder created is meant to be sparse. <br>    <br>`ragged`<br>Boolean, whether the placeholder created is meant to be ragged. <br>    <br>`type_spec`<br>A <br>    <br>`input_layer_name,name`<br>Optional name of the input layer (string).<br>   |




## Note

If any arguments are provided to `...`, then the sequential model is initialized with a `InputLayer` instance. If not, then the first layer passed to a Sequential model should have a defined input shape. What that means is that it should have received an `input_shape` or `batch_input_shape`

argument, or for some type of layers (recurrent, Dense...) an `input_dim`

argument. 

## Examples
```{r, eval=ecodown::examples_not_run()}
library(keras) 
model <- keras_model_sequential() 
model %>% 
  layer_dense(units = 32, input_shape = c(784)) %>% 
  layer_activation('relu') %>% 
  layer_dense(units = 10) %>% 
  layer_activation('softmax') 
model %>% compile( 
  optimizer = 'rmsprop', 
  loss = 'categorical_crossentropy', 
  metrics = c('accuracy') 
) 
# alternative way to provide input shape 
model <- keras_model_sequential(input_shape = c(784)) %>% 
  layer_dense(units = 32) %>% 
  layer_activation('relu') %>% 
  layer_dense(units = 10) %>% 
  layer_activation('softmax') 
```

## See Also
Other model functions:  `compile.keras.engine.training.Model()`, `evaluate.keras.engine.training.Model()`, `evaluate_generator()`, `fit.keras.engine.training.Model()`, `fit_generator()`, `get_config()`, `get_layer()`, `keras_model()`, `multi_gpu_model()`, `pop_layer()`, `predict.keras.engine.training.Model()`, `predict_generator()`, `predict_on_batch()`, `predict_proba()`, `summary.keras.engine.training.Model()`, `train_on_batch()`

