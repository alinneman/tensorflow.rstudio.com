---
format:
  html:
    css: /reference/assets/reference.css
---

| <button class="button"> ![](/reference/assets/GitHub-Mark-32px.png){width="20"} [View source on GitHub](https://github.com/rstudio/keras//blob/main/R/layers-normalization.R#L73) </button> |
|:------------------------------:|:--------------------------------------:|

# layer_batch_normalization

## Batch normalization layer (Ioffe and Szegedy, 2014).

## Description
Normalize the activations of the previous layer at each batch, i.e. applies a transformation that maintains the mean activation close to 0 and the activation standard deviation close to 1. 


## Usage
```r
layer_batch_normalization( 
  object, 
  axis = -1L, 
  momentum = 0.99, 
  epsilon = 0.001, 
  center = TRUE, 
  scale = TRUE, 
  beta_initializer = "zeros", 
  gamma_initializer = "ones", 
  moving_mean_initializer = "zeros", 
  moving_variance_initializer = "ones", 
  beta_regularizer = NULL, 
  gamma_regularizer = NULL, 
  beta_constraint = NULL, 
  gamma_constraint = NULL, 
  renorm = FALSE, 
  renorm_clipping = NULL, 
  renorm_momentum = 0.99, 
  fused = NULL, 
  virtual_batch_size = NULL, 
  adjustment = NULL, 
  input_shape = NULL, 
  batch_input_shape = NULL, 
  batch_size = NULL, 
  dtype = NULL, 
  name = NULL, 
  trainable = NULL, 
  weights = NULL 
) 
```

## Arguments
|Arguments|Description|
|---|---|
| object | What to compose the new `Layer` instance with. Typically a Sequential model or a Tensor (e.g., as returned by `layer_input()`). The return value depends on `object`. If `object` is: <br>- missing or `NULL`, the `Layer` instance is returned. <br>- a `Sequential` model, the model with an additional layer is returned. <br>- a Tensor, the output tensor from `layer_instance(object)` is returned.  |
| axis | Integer, the axis that should be normalized (typically the features axis). For instance, after a `Conv2D` layer with `data_format="channels_first"`, set `axis=1` in `BatchNormalization`. |
| momentum | Momentum for the moving mean and the moving variance. |
| epsilon | Small float added to variance to avoid dividing by zero. |
| center | If TRUE, add offset of `beta` to normalized tensor. If FALSE, `beta` is ignored. |
| scale | If TRUE, multiply by `gamma`. If FALSE, `gamma` is not used. When the next layer is linear (also e.g. `nn.relu`), this can be disabled since the scaling will be done by the next layer. |
| beta_initializer | Initializer for the beta weight. |
| gamma_initializer | Initializer for the gamma weight. |
| moving_mean_initializer | Initializer for the moving mean. |
| moving_variance_initializer | Initializer for the moving variance. |
| beta_regularizer | Optional regularizer for the beta weight. |
| gamma_regularizer | Optional regularizer for the gamma weight. |
| beta_constraint | Optional constraint for the beta weight. |
| gamma_constraint | Optional constraint for the gamma weight. |
| renorm | Whether to use Batch Renormalization (https://arxiv.org/abs/1702.03275). This adds extra variables during training. The inference is the same for either value of this parameter. |
| renorm_clipping | A named list or dictionary that may map keys `rmax`, `rmin`, `dmax` to scalar Tensors used to clip the renorm correction. The correction `(r, d)` is used as `corrected_value = normalized_value * r + d`, with `r` clipped to `[rmin, rmax]`, and `d` to `[-dmax, dmax]`. Missing `rmax`, `rmin`, `dmax` are set to `Inf`, `0`, `Inf`, `respectively`. |
| renorm_momentum | Momentum used to update the moving means and standard deviations with renorm. Unlike momentum, this affects training and should be neither too small (which would add noise) nor too large (which would give stale estimates). Note that momentum is still applied to get the means and variances for inference. |
| fused | `TRUE`, use a faster, fused implementation, or raise a ValueError if the fused implementation cannot be used. If `NULL`, use the faster implementation if possible. If `FALSE`, do not use the fused implementation. |
| virtual_batch_size | An integer. By default, virtual_batch_size is `NULL`, which means batch normalization is performed across the whole batch. When virtual_batch_size is not `NULL`, instead perform "Ghost Batch Normalization", which creates virtual sub-batches which are each normalized separately (with shared gamma, beta, and moving statistics). Must divide the actual `batch size` during execution. |
| adjustment | A function taking the Tensor containing the (dynamic) shape of the input tensor and returning a pair `(scale, bias)` to apply to the normalized values `(before gamma and beta)`, only during training. For example, if `axis==-1`, `adjustment <- function(shape) {     tuple(tf$random$uniform(shape[-1:NULL, style = "python"], 0.93, 1.07),           tf$random$uniform(shape[-1:NULL, style = "python"], -0.1, 0.1))    }`<br>will scale the normalized value by up to 7% up or down, then shift the result by up to 0.1 (with independent scaling and bias for each feature but shared across all examples), and finally apply gamma and/or beta. If `NULL`, no adjustment is applied. Cannot be specified if virtual_batch_size is specified. |
| input_shape | Dimensionality of the input (integer) not including the samples axis. This argument is required when using this layer as the first layer in a model. |
| batch_input_shape | Shapes, including the batch size. For instance, `batch_input_shape=c(10, 32)` indicates that the expected input will be batches of 10 32-dimensional vectors. `batch_input_shape=list(NULL, 32)`<br>indicates batches of an arbitrary number of 32-dimensional vectors. |
| batch_size | Fixed batch size for layer |
| dtype | The data type expected by the input, as a string (`float32`, `float64`, `int32`...) |
| name | An optional name string for the layer. Should be unique in a model (do not reuse the same name twice). It will be autogenerated if it isn't provided. |
| trainable | Whether the layer weights will be updated during training. |
| weights | Initial weights for layer. |


## Section

## Input shape

 Arbitrary. Use the keyword argument `input_shape` (list of integers, does not include the samples axis) when using this layer as the first layer in a model. 

## Output shape

 Same shape as input. 

## References

- [Batch Normalization: Accelerating Deep Network Training by Reducing Internal Covariate Shift](https://arxiv.org/abs/1502.03167)





