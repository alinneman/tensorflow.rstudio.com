---
format:
  html:
    css: /reference/assets/reference.css
---

| <button class="button"> ![](/reference/assets/GitHub-Mark-32px.png){width="20"} [View source on GitHub](https://github.com/rstudio/keras//blob/main/R/layers-convolutional.R#L331) </button> |
|:------------------------------:|:--------------------------------------:|

# layer_conv_1d_transpose

## Transposed 1D convolution layer (sometimes called Deconvolution).

## Description

The need for transposed convolutions generally arises from the desire to use a transformation going in the opposite direction of a normal convolution, i.e., from something that has the shape of the output of some convolution to something that has the shape of its input while maintaining a connectivity pattern that is compatible with said convolution. When using this layer as the first layer in a model, provide the keyword argument `input_shape`

(tuple of integers, does not include the sample axis), e.g. `input_shape=(128, 3)` for data with 128 time steps and 3 channels. 


## Usage
```r
layer_conv_1d_transpose( 
  object, 
  filters, 
  kernel_size, 
  strides = 1, 
  padding = "valid", 
  output_padding = NULL, 
  data_format = NULL, 
  dilation_rate = 1, 
  activation = NULL, 
  use_bias = TRUE, 
  kernel_initializer = "glorot_uniform", 
  bias_initializer = "zeros", 
  kernel_regularizer = NULL, 
  bias_regularizer = NULL, 
  activity_regularizer = NULL, 
  kernel_constraint = NULL, 
  bias_constraint = NULL, 
  input_shape = NULL, 
  batch_input_shape = NULL, 
  batch_size = NULL, 
  dtype = NULL, 
  name = NULL, 
  trainable = NULL, 
  weights = NULL 
) 
```

## Arguments
|Arguments|Description|
|---|---|
| object | What to compose the new `Layer` instance with. Typically a Sequential model or a Tensor (e.g., as returned by `layer_input()`). The return value depends on `object`. If `object` is: <br>- missing or `NULL`, the `Layer` instance is returned. <br>- a `Sequential` model, the model with an additional layer is returned. <br>- a Tensor, the output tensor from `layer_instance(object)` is returned.  |
| filters | Integer, the dimensionality of the output space (i.e. the number of output filters in the convolution). |
| kernel_size | An integer or list of a single integer, specifying the length of the 1D convolution window. |
| strides | An integer or list of a single integer, specifying the stride length of the convolution. Specifying any stride value != 1 is incompatible with specifying any `dilation_rate` value != 1. |
| padding | one of `"valid"` or `"same"` (case-insensitive). |
| output_padding | An integer specifying the amount of padding along the time dimension of the output tensor. The amount of output padding must be lower than the stride. If set to `NULL` (default), the output shape is inferred. |
| data_format | A string, one of `"channels_last"` (default) or `"channels_first"`. The ordering of the dimensions in the inputs. `"channels_last"` corresponds to inputs with shape `(batch, length, channels)` (default format for temporal data in Keras) while `"channels_first"` corresponds to inputs with shape `(batch, channels, length)`. |
| dilation_rate | an integer or list of a single integer, specifying the dilation rate to use for dilated convolution. Currently, specifying any `dilation_rate` value != 1 is incompatible with specifying any `strides`<br>value != 1. |
| activation | Activation function to use. If you don't specify anything, no activation is applied (ie. "linear" activation: `a(x) = x`). |
| use_bias | Boolean, whether the layer uses a bias vector. |
| kernel_initializer | Initializer for the `kernel` weights matrix. |
| bias_initializer | Initializer for the bias vector. |
| kernel_regularizer | Regularizer function applied to the `kernel`<br>weights matrix. |
| bias_regularizer | Regularizer function applied to the bias vector. |
| activity_regularizer | Regularizer function applied to the output of the layer (its "activation").. |
| kernel_constraint | Constraint function applied to the kernel matrix. |
| bias_constraint | Constraint function applied to the bias vector. |
| input_shape | Dimensionality of the input (integer) not including the samples axis. This argument is required when using this layer as the first layer in a model. |
| batch_input_shape | Shapes, including the batch size. For instance, `batch_input_shape=c(10, 32)` indicates that the expected input will be batches of 10 32-dimensional vectors. `batch_input_shape=list(NULL, 32)`<br>indicates batches of an arbitrary number of 32-dimensional vectors. |
| batch_size | Fixed batch size for layer |
| dtype | The data type expected by the input, as a string (`float32`, `float64`, `int32`...) |
| name | An optional name string for the layer. Should be unique in a model (do not reuse the same name twice). It will be autogenerated if it isn't provided. |
| trainable | Whether the layer weights will be updated during training. |
| weights | Initial weights for layer. |


## Section

## Input shape

 3D tensor with shape: `(batch, steps, channels)`

## Output shape

 3D tensor with shape: `(batch, new_steps, filters)`

If `output_padding` is specified: 

```

new_timesteps = ((timesteps - 1) * strides + kernel_size - 2 * padding + output_padding) 

```

## References

- [A guide to convolution arithmetic for deep learning](https://arxiv.org/abs/1603.07285v1)




## See Also
Other convolutional layers:  `layer_conv_1d()`, `layer_conv_2d_transpose()`, `layer_conv_2d()`, `layer_conv_3d_transpose()`, `layer_conv_3d()`, `layer_conv_lstm_2d()`, `layer_cropping_1d()`, `layer_cropping_2d()`, `layer_cropping_3d()`, `layer_depthwise_conv_1d()`, `layer_depthwise_conv_2d()`, `layer_separable_conv_1d()`, `layer_separable_conv_2d()`, `layer_upsampling_1d()`, `layer_upsampling_2d()`, `layer_upsampling_3d()`, `layer_zero_padding_1d()`, `layer_zero_padding_2d()`, `layer_zero_padding_3d()`

