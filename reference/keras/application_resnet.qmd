---
format:
  html:
    css: /reference/assets/reference.css
---

| <button class="button"> ![](/reference/assets/GitHub-Mark-32px.png){width="20"} [View source on GitHub](https://github.com/rstudio/keras//blob/main/R/applications.R) </button> | <button class="button"> ![](/reference/assets/GitHub-Mark-32px.png){width="20"} [Suggest edits on GitHub](https://github.com/rstudio/keras//edit/main/R/applications.R) </button> |
|:------------------------------:|:--------------------------------------:|

*R/applications.R*

# application_resnet

## Instantiates the ResNet architecture

## Description
Instantiates the ResNet architecture 


## Usage
```r
application_resnet50( 
  include_top = TRUE, 
  weights = "imagenet", 
  input_tensor = NULL, 
  input_shape = NULL, 
  pooling = NULL, 
  classes = 1000, 
  ... 
) 
application_resnet101( 
  include_top = TRUE, 
  weights = "imagenet", 
  input_tensor = NULL, 
  input_shape = NULL, 
  pooling = NULL, 
  classes = 1000, 
  ... 
) 
application_resnet152( 
  include_top = TRUE, 
  weights = "imagenet", 
  input_tensor = NULL, 
  input_shape = NULL, 
  pooling = NULL, 
  classes = 1000, 
  ... 
) 
application_resnet50_v2( 
  include_top = TRUE, 
  weights = "imagenet", 
  input_tensor = NULL, 
  input_shape = NULL, 
  pooling = NULL, 
  classes = 1000, 
  classifier_activation = "softmax", 
  ... 
) 
application_resnet101_v2( 
  include_top = TRUE, 
  weights = "imagenet", 
  input_tensor = NULL, 
  input_shape = NULL, 
  pooling = NULL, 
  classes = 1000, 
  classifier_activation = "softmax", 
  ... 
) 
application_resnet152_v2( 
  include_top = TRUE, 
  weights = "imagenet", 
  input_tensor = NULL, 
  input_shape = NULL, 
  pooling = NULL, 
  classes = 1000, 
  classifier_activation = "softmax", 
  ... 
) 
resnet_preprocess_input(x) 
resnet_v2_preprocess_input(x) 
```

## Arguments
|Arguments|Description|
|---|---|
| include_top | Whether to include the fully-connected layer at the top of the network. Defaults to `TRUE`. |
| weights | One of `NULL` (random initialization), `'imagenet'` (pre-training on ImageNet), or the path to the weights file to be loaded. Defaults to `'imagenet'`. |
| input_tensor | Optional Keras tensor (i.e. output of `layer_input()`) to use as image input for the model. |
| input_shape | optional shape list, only to be specified if `include_top` is FALSE (otherwise the input shape has to be `c(224, 224, 3)` (with `'channels_last'` data format) or `c(3, 224, 224)` (with `'channels_first'` data format). It should have exactly 3 inputs channels, and width and height should be no smaller than 32. E.g. `c(200, 200, 3)` would be one valid value. |
| pooling | Optional pooling mode for feature extraction when `include_top` is `FALSE`. Defaults to `NULL`. <br>- `NULL` means that the output of the model will be the 4D tensor output of the last convolutional layer. <br>- `'avg'` means that global average pooling will be applied to the output of the last convolutional layer, and thus the output of the model will be a 2D tensor. <br>- `'max'` means that global max pooling will be applied.  |
| classes | Optional number of classes to classify images into, only to be specified if `include_top` is TRUE, and if no `weights` argument is specified. Defaults to 1000 (number of ImageNet classes). |
| ... | For backwards and forwards compatibility |
| classifier_activation | A string or callable. The activation function to use on the "top" layer. Ignored unless `include_top = TRUE`. Set `classifier_activation = NULL` to return the logits of the "top" layer. Defaults to `'softmax'`. When loading pretrained weights, `classifier_activation` can only be `NULL` or `"softmax"`. |
| x | `preprocess_input()` takes an array or floating point tensor, 3D or 4D with 3 color channels, with values in the range `[0, 255]`. |

## Details

Reference: 

- [Deep Residual Learning for Image Recognition](https://arxiv.org/abs/1512.03385) (CVPR 2015) 

For image classification use cases, see [this page for detailed examples](https://keras.io/api/applications/#usage-examples-for-image-classification-models). 

For transfer learning use cases, make sure to read the [guide to transfer learning & fine-tuning](https://keras.io/guides/transfer_learning/). 

Note: each Keras Application expects a specific kind of input preprocessing. For ResNet, call `tf.keras.applications.resnet.preprocess_input` on your inputs before passing them to the model. `resnet.preprocess_input` will convert the input images from RGB to BGR, then will zero-center each color channel with respect to the ImageNet dataset, without scaling. 




## Examples
```{r, eval=ecodown::examples_not_run()}
library(keras) 
# instantiate the model 
model <- application_resnet50(weights = 'imagenet') 
# load the image 
img_path <- "elephant.jpg" 
img <- image_load(img_path, target_size = c(224,224)) 
x <- image_to_array(img) 
# ensure we have a 4d tensor with single element in the batch dimension, 
# the preprocess the input for prediction using resnet50 
x <- array_reshape(x, c(1, dim(x))) 
x <- imagenet_preprocess_input(x) 
# make predictions then decode and print them 
preds <- model %>% predict(x) 
imagenet_decode_predictions(preds, top = 3)[[1]] 
```

## See Also

- [https://www.tensorflow.org/api_docs/python/tf/keras/applications/resnet50/ResNet50](https://www.tensorflow.org/api_docs/python/tf/keras/applications/resnet50/ResNet50)

- [https://www.tensorflow.org/api_docs/python/tf/keras/applications/resnet/ResNet101](https://www.tensorflow.org/api_docs/python/tf/keras/applications/resnet/ResNet101)

- [https://www.tensorflow.org/api_docs/python/tf/keras/applications/resnet/ResNet152](https://www.tensorflow.org/api_docs/python/tf/keras/applications/resnet/ResNet152)

- [https://www.tensorflow.org/api_docs/python/tf/keras/applications/resnet_v2/ResNet50V2](https://www.tensorflow.org/api_docs/python/tf/keras/applications/resnet_v2/ResNet50V2)

- [https://www.tensorflow.org/api_docs/python/tf/keras/applications/resnet_v2/ResNet101V2](https://www.tensorflow.org/api_docs/python/tf/keras/applications/resnet_v2/ResNet101V2)

- [https://www.tensorflow.org/api_docs/python/tf/keras/applications/resnet_v2/ResNet152V2](https://www.tensorflow.org/api_docs/python/tf/keras/applications/resnet_v2/ResNet152V2)

- [https://keras.io/api/applications/](https://keras.io/api/applications/)

