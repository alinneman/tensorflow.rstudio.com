---
format:
  html:
    css: /reference/assets/reference.css
---

| <button class="button"> ![](/reference/assets/GitHub-Mark-32px.png){width="20"} [View source on GitHub](https://github.com/rstudio/keras//blob/main/R/layers-locally-connected.R) </button> | <button class="button"> ![](/reference/assets/GitHub-Mark-32px.png){width="20"} [Suggest edits on GitHub](https://github.com/rstudio/keras//edit/main/R/layers-locally-connected.R) </button> |
|:------------------------------:|:--------------------------------------:|

*R/layers-locally-connected.R*

# layer_locally_connected_2d

## Locally-connected layer for 2D inputs.

## Description
`layer_locally_connected_2d` works similarly to `layer_conv_2d()`, except that weights are unshared, that is, a different set of filters is applied at each different patch of the input. 


## Usage
```r
layer_locally_connected_2d( 
  object, 
  filters, 
  kernel_size, 
  strides = c(1L, 1L), 
  padding = "valid", 
  data_format = NULL, 
  activation = NULL, 
  use_bias = TRUE, 
  kernel_initializer = "glorot_uniform", 
  bias_initializer = "zeros", 
  kernel_regularizer = NULL, 
  bias_regularizer = NULL, 
  activity_regularizer = NULL, 
  kernel_constraint = NULL, 
  bias_constraint = NULL, 
  implementation = 1L, 
  batch_size = NULL, 
  name = NULL, 
  trainable = NULL, 
  weights = NULL 
) 
```

## Arguments
|Arguments|Description|
|---|---|
| object | What to compose the new `Layer` instance with. Typically a Sequential model or a Tensor (e.g., as returned by `layer_input()`). The return value depends on `object`. If `object` is: <br>- missing or `NULL`, the `Layer` instance is returned. <br>- a `Sequential` model, the model with an additional layer is returned. <br>- a Tensor, the output tensor from `layer_instance(object)` is returned.  |
| filters | Integer, the dimensionality of the output space (i.e. the number output of filters in the convolution). |
| kernel_size | An integer or list of 2 integers, specifying the width and height of the 2D convolution window. Can be a single integer to specify the same value for all spatial dimensions. |
| strides | An integer or list of 2 integers, specifying the strides of the convolution along the width and height. Can be a single integer to specify the same value for all spatial dimensions. Specifying any stride value != 1 is incompatible with specifying any `dilation_rate` value != 1. |
| padding | Currently only supports `"valid"` (case-insensitive). `"same"`<br>may be supported in the future. |
| data_format | A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs. `channels_last` corresponds to inputs with shape `(batch, width, height, channels)` while `channels_first` corresponds to inputs with shape `(batch, channels, width, height)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be "channels_last". |
| activation | Activation function to use. If you don't specify anything, no activation is applied (ie. "linear" activation: `a(x) = x`). |
| use_bias | Boolean, whether the layer uses a bias vector. |
| kernel_initializer | Initializer for the `kernel` weights matrix. |
| bias_initializer | Initializer for the bias vector. |
| kernel_regularizer | Regularizer function applied to the `kernel`<br>weights matrix. |
| bias_regularizer | Regularizer function applied to the bias vector. |
| activity_regularizer | Regularizer function applied to the output of the layer (its "activation").. |
| kernel_constraint | Constraint function applied to the kernel matrix. |
| bias_constraint | Constraint function applied to the bias vector. |
| implementation | either 1, 2, or 3. 1 loops over input spatial locations to perform the forward pass. It is memory-efficient but performs a lot of (small) ops. 2 stores layer weights in a dense but sparsely-populated 2D matrix and implements the forward pass as a single matrix-multiply. It uses a lot of RAM but performs few (large) ops. 3 stores layer weights in a sparse tensor and implements the forward pass as a single sparse matrix-multiply. How to choose: 1: large, dense models, 2: small models, 3: large, sparse models, where "large" stands for large input/output activations (i.e. many `filters, input_filters, large input_size, output_size`), and "sparse" stands for few connections between inputs and outputs, i.e. small ratio `filters * input_filters * kernel_size / (input_size * strides)`, where inputs to and outputs of the layer are assumed to have shapes `(input_size, input_filters)`, `(output_size, filters)` respectively. It is recommended to benchmark each in the setting of interest to pick the most efficient one (in terms of speed and memory usage). Correct choice of implementation can lead to dramatic speed improvements (e.g. 50X), potentially at the expense of RAM. Also, only `padding="valid"` is supported by `implementation=1`. |
| batch_size | Fixed batch size for layer |
| name | An optional name string for the layer. Should be unique in a model (do not reuse the same name twice). It will be autogenerated if it isn't provided. |
| trainable | Whether the layer weights will be updated during training. |
| weights | Initial weights for layer. |


## Section

## Input shape

 4D tensor with shape: `(samples, channels, rows, cols)`

if data_format='channels_first' or 4D tensor with shape: `(samples, rows, cols, channels)` if data_format='channels_last'. 

## Output shape

 4D tensor with shape: `(samples, filters, new_rows, new_cols)` if data_format='channels_first' or 4D tensor with shape: `(samples, new_rows, new_cols, filters)` if data_format='channels_last'. `rows` and `cols` values might have changed due to padding. 




## See Also
Other locally connected layers:  `layer_locally_connected_1d()`

