{
  "hash": "431ad6b2ced82719cbd0ce7914834c88",
  "result": {
    "markdown": "---\ntitle: \"Python Subclasses\"\n---\n\n\n\n\nWhen using keras, a desire to create Python-based subclasses can arise\nin a number of ways. For example, when you want to:\n\n-   define custom layers and/or models\n-   implement custom training logic\n-   create custom losses or optimizers\n-   define custom callbacks\n-   ... and more!\n\nIn such scenarios, the most powerful and flexible approach is to\ndirectly inherit from, and then modify and/or enhance an appropriate\nPython class.\n\nSubclassing a Python class in R is generally straightforward. Two\nsyntaxes are provided: one that adheres to R conventions and uses\n`R6::R6Class` as the class constructor, and one that adheres more to\nPython conventions, and attempts to replicate Python syntax in R.\n\n## Examples\n\n### A custom constraint (R6)\n\nFor demonstration purposes, let's say you want to implement a custom\nkeras kernel constraint via subclassing. Using R6:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nNonNegative <- R6::R6Class(\"NonNegative\",\n  inherit = keras$constraints$Constraint,\n  public = list(\n    \"__call__\" = function(x) {\n       w * k_cast(w >= 0, k_floatx())\n    }\n  )\n)\nNonNegative <- r_to_py(NonNegative, convert=TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoaded Tensorflow version 2.9.1\n```\n:::\n:::\n\n\nThe `r_to_py` method will convert an R6 class generator into a Python\nclass generator. After conversion, Python class generators will be\ndifferent from R6 class generators in a few ways:\n\n-   New class instances are generated by calling the class directly:\n    `NonNegative()` (not `NonNegative$new()`)\n\n-   All methods (functions) are (potentially) modified to ensure their\n    first argument is `self`.\n\n-   All methods have in scope `__class__`, `super` and the class name\n    (`NonNegative`).\n\n-   For convenience, some method names are treated as aliases:\n\n    -   `initialize` is treated as an alias for `__init__`()\n    -   `finalize` is treated as an alias for `__del__`()\n\n-   `super` can be accessed in 3 ways:\n\n    1)  R6 style, which supports only single inheritance (the most\n        common type)\n\n    ``` r\n    super$initialize()\n    ```\n\n    2)  Python 2 style, which requires explicitly providing the class\n        generator and instance\n\n    ``` r\n    super(NonNegative, self)$`__init__`()\n    ```\n\n    3)  Python 3 style\n\n    ``` r\n    super()$`__init__`()\n    ```\n\n-   When subclassing Keras base classes, it is generally your\n    responsibility to call `super$initialize()` if you are masking a\n    superclass initializer by providing your own `initialize` method.\n\n-   Passing `convert = FALSE` to `r_to_py()` will mean that all R\n    methods will receive Python objects as arguments, and are expected\n    to return Python objects. This allows for some features not\n    available with `convert=TRUE`, namely, modifying some Python\n    objects, like dictionaries or lists, in-place.\n\n-   Active bindings (methods supplied to `R6Class(active=...)`) are\n    converted to Python `@property`-decorated methods.\n\n-   R6 classes with private methods or attributes are not supported.\n\n-   The argument supplied to `inherit` can be:\n\n    -   missing or `NULL`\n    -   a Python class generator\n    -   an R6 class generator, as long as it can be converted to a\n        Python class generator as well\n    -   a list of Python/R6 classes (for multiple inheritance)\n    -   A list of superclasses, with optional additional keywords (e.g.,\n        `metaclass=`, only for advanced Python use cases)\n\n### A custom constraint (`%py_class%`)\n\nAs an alternative to `r_to_py(R6Class(...))`, we also provide\n`%py_class%`, a more concise alternative syntax for achieving the same\noutcome. `%py_class%` is heavily inspired by the Python `class`\nstatement syntax, and is especially convenient when translating Python\ncode to R. Translating the above example, you could write the same using\n`%py_class%`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nNonNegative(keras$constraints$Constraint) %py_class% {\n  \"__call__\" <- function(x) {\n    w * k_cast(w >= 0, k_floatx())\n  }\n}\n```\n:::\n\n\nNotice, this is very similar to the equivalent [Python\ncode](https://www.tensorflow.org/versions/r2.5/api_docs/python/tf/keras/constraints/Constraint):\n\n\n::: {.cell}\n\n```{.python .cell-code}\nclass NonNegative(tf.keras.constraints.Constraint):\n    def __call__(self, w):\n        return w * tf.cast(tf.math.greater_equal(w, 0.), w.dtype)\n```\n:::\n\n\nSome (potentially surprising) notes about `%py_class%`:\n\n-   Just like the Python `class` statement, it assigns the constructed\n    class in the current scope! (There is no need to write\n    `NonNegative <- ...`).\n\n-   The left hand side can be:\n\n    -   A bare symbol, `ClassName`\n    -   A pseudo-call, with superclasses and keywords as arguments:\n        `ClassName(Superclass1, Superclass2, metaclass=my_metaclass)`\n\n-   The right hand side is evaluated in a new environment to form the\n    namespace for the class methods.\n\n-   `%py_class%` objects can be safely defined at the top level of an R\n    package. (see details about `delay_load` below)\n\n-   Two keywords are treated specially: `convert` and `delay_load`.\n\n-   If you want to call `r_to_py` with `convert=FALSE`, pass it as a\n    keyword:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nNonNegative(keras$constraints$Constraint, convert=FALSE) %py_class% { ... }\n```\n:::\n\n\n-   You can delay creating the python type object until this first time\n    a class instance is created by passing `delay_load=TRUE`. The\n    default value is `FALSE` for most contexts, but `TRUE` if you are in\n    an R package. (The actual test performed is\n    `identical(topenv(), globalenv())`). If a `%py_class%` type object\n    is delayed, it will display `\"<<R6type>.ClassName> (delayed)\"` when\n    printed.\n\n-   An additional convenience is that if the first expression of a\n    function body or the class body is a literal character string, it is\n    automatically taken as the `__doc__` attribute of the class or\n    method. The doc string will then be visible to both python and R\n    tools e.g. `reticulate::py_help()`. See `?py_class` for an example.\n\nIn all other regards, `%py_class%` is equivalent to `r_to_py(R6Class())`\n(indeed, under the hood, they do the same thing).\n\n### A custom layer (R6)\n\nThe same pattern can be extended to all sorts of keras objects. For\nexample, a custom layer can be written by subclassing the base Keras\nLayer:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCustomLayer <- r_to_py(R6::R6Class(\n\n  classname = \"CustomLayer\",\n  inherit = keras$layers$Layer,\n\n  public = list(\n    initialize = function(output_dim) {\n      self$output_dim <- output_dim\n    },\n\n    build = function(input_shape) {\n      self$kernel <- self$add_weight(\n        name = 'kernel',\n        shape = list(input_shape[[2]], self$output_dim),\n        initializer = initializer_random_normal(),\n        trainable = TRUE\n      )\n    },\n\n    call = function(x, mask = NULL) {\n      k_dot(x, self$kernel)\n    },\n\n    compute_output_shape = function(input_shape) {\n      list(input_shape[[1]], self$output_dim)\n    }\n  )\n))\n```\n:::\n\n\n### A custom layer (`%py_class%`)\n\nor using `%py_class%`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCustomLayer(keras$layers$Layer) %py_class% {\n\n  initialize <- function(output_dim) {\n    self$output_dim <- output_dim\n  }\n\n  build <- function(input_shape) {\n    self$kernel <- self$add_weight(\n      name = 'kernel',\n      shape = list(input_shape[[2]], self$output_dim),\n      initializer = initializer_random_normal(),\n      trainable = TRUE\n    )\n  }\n\n  call <- function(x, mask = NULL) {\n    k_dot(x, self$kernel)\n  }\n\n  compute_output_shape <- function(input_shape) {\n    list(input_shape[[1]], self$output_dim)\n  }\n}\n```\n:::\n---\nformat: html\n---\n\n## Environment Details\n\n::: {.callout-note appearance=\"simple\" collapse=\"true\"}\n### Tensorflow Version\n\n::: {.cell}\n\n```{.r .cell-code}\ntensorflow::tf_config()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTensorFlow v2.9.1 (~/.virtualenvs/r-tensorflow-site/lib/python3.9/site-packages/tensorflow)\nPython v3.9 (~/.virtualenvs/r-tensorflow-site/bin/python)\n```\n:::\n:::\n:::\n\n::: {.callout-note appearance=\"simple\" collapse=\"true\"}\n### R Environment Information\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.2.1 (2022-06-23)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.4 LTS\n\nMatrix products: default\nBLAS/LAPACK: /usr/lib/x86_64-linux-gnu/libmkl_rt.so\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] keras_2.9.0.9000     reticulate_1.25-9000\n\nloaded via a namespace (and not attached):\n [1] Rcpp_1.0.9            whisker_0.4           knitr_1.39           \n [4] magrittr_2.0.3        here_1.0.1            lattice_0.20-45      \n [7] R6_2.5.1              rlang_1.0.4           fastmap_1.1.0        \n[10] stringr_1.4.0         tools_4.2.1           grid_4.2.1           \n[13] xfun_0.31             png_0.1-7             cli_3.3.0            \n[16] htmltools_0.5.2       tfruns_1.5.0          rprojroot_2.0.3      \n[19] yaml_2.3.5            digest_0.6.29         tensorflow_2.9.0.9000\n[22] Matrix_1.4-1          base64enc_0.1-3       htmlwidgets_1.5.4    \n[25] zeallot_0.1.0         evaluate_0.15         rmarkdown_2.14       \n[28] stringi_1.7.8         compiler_4.2.1        generics_0.1.3       \n[31] jsonlite_1.8.0       \n```\n:::\n:::\n:::\n\n::: {.callout-note appearance=\"simple\" collapse=\"true\"}\n### Python Environment Information\n\n::: {.cell}\n\n```{.r .cell-code}\nsystem2(reticulate::py_exe(), c(\"-m pip freeze\"), stdout = TRUE) |> writeLines()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nabsl-py==1.1.0\nasttokens==2.0.5\nastunparse==1.6.3\nbackcall==0.2.0\nbeautifulsoup4==4.11.1\ncachetools==5.2.0\ncertifi==2022.6.15\ncharset-normalizer==2.1.0\ndecorator==5.1.1\ndill==0.3.5.1\netils==0.6.0\nexecuting==0.8.3\nfilelock==3.7.1\nflatbuffers==1.12\ngast==0.4.0\ngdown==4.5.1\ngoogle-auth==2.9.0\ngoogle-auth-oauthlib==0.4.6\ngoogle-pasta==0.2.0\ngoogleapis-common-protos==1.56.4\ngrpcio==1.47.0\nh5py==3.7.0\nidna==3.3\nimportlib-metadata==4.12.0\nimportlib-resources==5.8.0\nipython==8.4.0\njedi==0.18.1\nkeras==2.9.0\nKeras-Preprocessing==1.1.2\nkeras-tuner==1.1.2\nkt-legacy==1.0.4\nlibclang==14.0.1\nMarkdown==3.3.7\nmatplotlib-inline==0.1.3\nnumpy==1.23.1\noauthlib==3.2.0\nopt-einsum==3.3.0\npackaging==21.3\npandas==1.4.3\nparso==0.8.3\npexpect==4.8.0\npickleshare==0.7.5\nPillow==9.2.0\npromise==2.3\nprompt-toolkit==3.0.30\nprotobuf==3.19.4\nptyprocess==0.7.0\npure-eval==0.2.2\npyasn1==0.4.8\npyasn1-modules==0.2.8\npydot==1.4.2\nPygments==2.12.0\npyparsing==3.0.9\nPySocks==1.7.1\npython-dateutil==2.8.2\npytz==2022.1\nPyYAML==6.0\nrequests==2.28.1\nrequests-oauthlib==1.3.1\nrsa==4.8\nscipy==1.8.1\nsix==1.16.0\nsoupsieve==2.3.2.post1\nstack-data==0.3.0\ntensorboard==2.9.1\ntensorboard-data-server==0.6.1\ntensorboard-plugin-wit==1.8.1\ntensorflow==2.9.1\ntensorflow-datasets==4.6.0\ntensorflow-estimator==2.9.0\ntensorflow-hub==0.12.0\ntensorflow-io-gcs-filesystem==0.26.0\ntensorflow-metadata==1.9.0\ntermcolor==1.1.0\ntoml==0.10.2\ntqdm==4.64.0\ntraitlets==5.3.0\ntyping_extensions==4.3.0\nurllib3==1.26.10\nwcwidth==0.2.5\nWerkzeug==2.1.2\nwrapt==1.14.1\nzipp==3.8.1\n```\n:::\n:::\n:::\n\n::: {.callout-note appearance=\"simple\" collapse=\"true\"}\n### Additional Information\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nTF Devices:\n-  PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU') \n-  PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU') \nCPU cores: 12 \nDate rendered: 2022-07-14 \nPage render time: 3 seconds\n```\n:::\n:::\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}