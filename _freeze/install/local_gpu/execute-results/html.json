{
  "hash": "27a2067e2120798a5855207d50140239",
  "result": {
    "markdown": "---\ntitle: \"Local GPU\"\naliases:\n  - /installation_gpu.html\n  - /tensorflow/installation_gpu.html\n  - /tensorflow/articles/installation_gpu.html\n  - /tools/installation_gpu.html\n  - /tools/local_gpu\n  - /tools/local_gpu.html\neditor_options:\n  markdown:\n    wrap: sentence\n    canonical: true\n---\n\n\n\n\nThe default build of TensorFlow will use an NVIDIA® GPU if it is available and the appropriate drivers are installed, and otherwise fallback to using the CPU only.\n\nThe prerequisites for the GPU version of TensorFlow on each platform are covered below.\nNote that on all platforms (except macOS) you must be running an NVIDIA® GPU with CUDA® Compute Capability 3.5 or higher.\nSee the list of [CUDA-enabled GPU cards](https://developer.nvidia.com/cuda-gpus).\n\nTo enable TensorFlow to use a local NVIDIA® GPU, you can install the following:\n\n-   [CUDA 11.2](https://developer.nvidia.com/cuda-11.2.2-download-archive)\n-   [cuDNN 8.1](https://developer.nvidia.com/rdp/cudnn-archive)\n\n::: panel-tabset\n### Ubuntu 20.04\n\nTo install the required NVIDIA components on Ubuntu 20.04, you can run the following at the terminal:\n\n``` bash\nwget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-ubuntu2004.pin\nsudo mv cuda-ubuntu2004.pin /etc/apt/preferences.d/cuda-repository-pin-600\nsudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/7fa2af80.pub\nsudo add-apt-repository \"deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/ /\"\nsudo apt-get update\nsudo apt-get -y install cuda-11-2 libcudnn8=8.1.1.33-1+cuda11.2\nsudo apt-mark hold libcudnn8\n```\n\n### Windows\n\nFirst, confirm you have an appropriate GPU.\nThis article describes how to detect whether your graphics card uses an NVIDIA® GPU:\n\n<http://nvidia.custhelp.com/app/answers/detail/a_id/2040/~/identifying-the-graphics-card-model-and-device-id-in-a-pc>\n\nOnce you've confirmed that you have an NVIDIA® GPU, the following article describes how to install required software components including the CUDA Toolkit v11.2 and cuDNN 8.1:\n\n<https://www.tensorflow.org/install/gpu#hardware_requirements>\n\nNote that the documentation on installation of the last component (cuDNN) is a bit sparse.\nOnce you join the NVIDIA® developer program and download the zip file containing cuDNN you need to extract the zip file and add the location where you extracted it to your system PATH.\n\n### Other Linux\n\nThe specifics of installing required software differ by Linux version so please review the NVIDIA® documentation carefully to ensure you install everything correctly.\n\n-   [CUDA 11.2](https://developer.nvidia.com/cuda-11.2.2-download-archive)\n-   [cuDNN 8.1](https://developer.nvidia.com/rdp/cudnn-archive)\n\n### macOS\n\nTensorFlow does not support usage of NVIDIA GPUs on Macs.\nFor ARM (M1, M2) Macs however, Apple provides a custom build of TensorFlow that can take advantage of the GPU.\n`install_tensorflow()` will detect if it is being run on an Arm Mac and automatically install the appropriate Python packages (`tensorflow-macos` and `tensorflow-metal`).\n\nConda is the only supported installation method on Arm Macs.\nAdditionally, x86_64 builds of R running under Rosetta are not supported; an Arm64 build of R is required.\n\nYou can test if you have an Arm build of R like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nR.version$arch\n```\n:::\n\n\nIf this returns `\"aarch64\"`, you're using the correct build of R.\nIf instead it returns `\"x86_64\"`, then you need to install a different build of R.\nYou can install an Arm build of R by navigating to <https://cloud.r-project.org/bin/macosx/> and selecting the appropriate package (e.g., \"R-4.2.1-arm64.pkg\") or using an installation manager like [rig](https://github.com/r-lib/rig) and running `rig add release`.\n\nYou can configure reticulate to use a conda Python using reticulate like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreticulate::install_miniconda()\ntensorflow::install_tensorflow()\n```\n:::\n\n\nNote that `install_miniconda()` automatically creates a conda environment named `r-reticulate`, that becomes the default environment used by reticulate.\n:::\n\n### Test\n\nYou can test if TensorFlow can use a local GPU by running the following:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tensorflow)\ntf$config$list_physical_devices(\"GPU\")\n```\n:::\n\n\nIf you see a list like this:\n\n``` text\n[[1]]\nPhysicalDevice(name='/physical_device:GPU:0', device_type='GPU')\n```\n\nThen that means TensorFlow is configured properly.\nIf instead you see an empty `list()`, then TensorFlow is not using a GPU.\n\nFor support with installation, open a [Github issue](https://github.com/rstudio/tensorflow/issues/new?assignees=&labels=Installation&template=installation-issue.md&title=Installation+Issue)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}