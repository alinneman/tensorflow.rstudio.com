{
  "hash": "dbadfaf66e0a38770f5ddb930e6c07a3",
  "result": {
    "markdown": "---\ntitle: \"Local GPU\"\noutput:\n  html_document:\n    toc_depth: 3\n    toc_float:\n        collapsed: false\ntype: docs\nmenu:\n  main:\n    name: \"Local GPU\"\n    identifier: \"tools-local-gpu\"\n    parent: \"installation-gpu\"\n    weight: 20\naliases:\n  - /installation_gpu.html\n  - /tensorflow/installation_gpu.html\n  - /tensorflow/articles/installation_gpu.html\n  - /tools/installation_gpu.html\n  - /tools/local_gpu\n  - /tools/local_gpu.html\neditor_options:\n  markdown:\n    wrap: 72\n    canonical: true\n---\n\n\n\n\n## Overview\n\nTensorFlow can be configured to run on either CPUs or GPUs. The default\nbuild of TensorFlow will use a GPU if it is available and the\nappropriate drivers are installed, and otherwise fallback to using the\nCPU only.\n\nThe prerequisites for the GPU version of TensorFlow on each platform are\ncovered below. Note that on all platforms you must be running an NVIDIA®\nGPU with CUDA® Compute Capability 3.5 or higher. See the list of\n[CUDA-enabled GPU cards](https://developer.nvidia.com/cuda-gpus).\n\nTo enable TensorFlow to use a local GPU, you can install the following:\n\n-   [CUDA\n    11.2](https://developer.nvidia.com/cuda-11.2.2-download-archive)\n-   [cuDNN 8.1](https://developer.nvidia.com/rdp/cudnn-archive)\n\n### Linux\n\nThe specifics of installing required software differ by Linux version so\nplease review the NVIDIA® documentation carefully to ensure you install\neverything correctly.\n\nThe following section provides as example of the installation commands\nyou might use on Ubuntu 20.04.\n\n#### Ubuntu 20.04\n\nTo install the required NVIDIA components on Ubuntu 20.04, you can run\nthe following at the terminal:\n\n``` bash\nwget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-ubuntu2004.pin\nsudo mv cuda-ubuntu2004.pin /etc/apt/preferences.d/cuda-repository-pin-600\nsudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/7fa2af80.pub\nsudo add-apt-repository \"deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/ /\"\nsudo apt-get update\nsudo apt-get -y install cuda-11-2 libcudnn8=8.1.1.33-1+cuda11.2\nsudo apt-mark hold libcudnn8\n```\n\n### Windows\n\nThis article describes how to detect whether your graphics card uses an\nNVIDIA® GPU:\n\n<http://nvidia.custhelp.com/app/answers/detail/a_id/2040/~/identifying-the-graphics-card-model-and-device-id-in-a-pc>\n\nOnce you've confirmed that you have an NVIDIA® GPU, the following\narticle describes how to install required software components including\nthe CUDA Toolkit v11.2 and cuDNN 8.1:\n\n<https://www.tensorflow.org/install/gpu#hardware_requirements>\n\nNote that the documentation on installation of the last component\n(cuDNN) is a bit sparse. Once you join the NVIDIA® developer program and\ndownload the zip file containing cuDNN you need to extract the zip file\nand add the location where you extracted it to your system PATH.\n\n### macOS\n\nTensorFlow does not support usage of GPUs on Intel Macs. For Arm Macs\nhowever, Apple provides a custom build of TensorFlow that can take\nadvantage of the GPU. `install_tensorflow()` will detect if it is being\nrun on an Arm Mac and automatically install the appropriate Python\npackages (`tensorflow-macos` and `tensorflow-metal`).\n\nConda is the only supported installation method on Arm Macs.\nAdditionally, x86_64 builds of R running under Rosetta are not\nsupported; an Arm64 build of R is required.\n\nYou can test if you have an Arm build of R like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nR.version$arch\n```\n:::\n\n\nIf this returns `\"aarch64\"`, you're using the correct build of R. If\ninstead it returns `\"x86_64\"`, then you need to install a different\nbuild of R. You can install an Arm build of R by navigating to\n<https://cloud.r-project.org/bin/macosx/> and selecting the appropriate\npackage (e.g., \"R-4.2.1-arm64.pkg\") or using an installation manager\nlike [rig](https://github.com/r-lib/rig) and running `rig add release`.\n\nYou can configure reticulate to use a conda Python using reticulate like\nthis:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreticulate::install_miniconda()\ntensorflow::install_tensorflow()\n```\n:::\n\n\nNote that `install_miniconda()` automatically creates a conda\nenvironment named `r-reticulate`, that becomes the default environment\nused by reticulate.\n\n### Test\n\nYou can test if TensorFlow can use a local GPU by running the following:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tensorflow)\ntf$config$list_physical_devices(\"GPU\")\n```\n:::\n\n\nIf you see a list like this:\n\n``` text\n[[1]]\nPhysicalDevice(name='/physical_device:GPU:0', device_type='GPU')\n```\n\nThen that means TensorFlow is configured properly. If instead you see an\nempty `list()`, then TensorFlow is not using a GPU.\n\nFor support with installation, open a [Github\nissue](https://github.com/rstudio/tensorflow/issues/new?assignees=&labels=Installation&template=installation-issue.md&title=Installation+Issue)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}