{
  "hash": "f8d786ddf3c7298238166e1311ae85a4",
  "result": {
    "markdown": "---\ntitle: \"Local GPU\"\noutput: \n  html_document:\n    toc_depth: 3\n    toc_float:\n        collapsed: false\ntype: docs\nmenu:\n  main:\n    name: \"Local GPU\"\n    identifier: \"tools-local-gpu\"\n    parent: \"installation-gpu\"\n    weight: 20\naliases:\n  - /installation_gpu.html\n  - /tensorflow/installation_gpu.html\n  - /tensorflow/articles/installation_gpu.html\n  - /tools/installation_gpu.html\n  - /tools/local_gpu\n  - /tools/local_gpu.html\n---\n\n\n\n\n## Overview\n\nTensorFlow can be configured to run on either CPUs or GPUs. By default,\nTensorFlow will use a GPU if it is available and the appropriate drivers\nare installed, and otherwise fallback to using the CPU only.\n\nThe prerequisites for the GPU version of TensorFlow on each platform are\ncovered below. Note that on all platforms you must be running an NVIDIA®\nGPU with CUDA® Compute Capability 3.5 or higher. See the list of\n[CUDA-enabled GPU cards](https://developer.nvidia.com/cuda-gpus).\n\n## Prerequisties\n\n### Windows\n\nThis article describes how to detect whether your graphics card uses an\nNVIDIA® GPU:\n\n<http://nvidia.custhelp.com/app/answers/detail/a_id/2040/~/identifying-the-graphics-card-model-and-device-id-in-a-pc>\n\nOnce you've confirmed that you have an NVIDIA® GPU, the following\narticle describes how to install required software components including\nthe CUDA Toolkit v11.2 and cuDNN 8.1:\n\n<https://www.tensorflow.org/install/gpu#hardware_requirements>\n\nNote that the documentation on installation of the last component\n(cuDNN) is a bit sparse. Once you join the NVIDIA® developer program and\ndownload the zip file containing cuDNN you need to extract the zip file\nand add the location where you extracted it to your system PATH.\n\n### Ubuntu\n\nThe specifics of installing required software differ by Linux version so\nplease review the NVIDIA® documentation carefully to ensure you install\neverything correctly.\n\nThe following section provides as example of the installation commands\nyou might use on Ubuntu 20.04.\n\n#### Ubuntu 20.04 Example\n\nFirst, install\n[CUDA 11.2](https://developer.nvidia.com/cuda-11.2.2-download-archive) and [cuDNN 8.1](https://developer.nvidia.com/rdp/cudnn-archive). The\ninstructions for Ubuntu 20.04 are reproduced here, for other platforms\nconsult the links:\n\n``` bash\nwget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-ubuntu2004.pin\nsudo mv cuda-ubuntu2004.pin /etc/apt/preferences.d/cuda-repository-pin-600\nsudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/7fa2af80.pub\nsudo add-apt-repository \"deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/ /\"\nsudo apt-get update\nsudo apt-get -y install cuda-11-2 libcudnn8=8.1.1.33-1+cuda11.2\nsudo apt-mark hold libcudnn8\n```\n\n\n\n### Mac OS X\n\nTensorflow does not support GPUs on Intel Macs. Apple however provides a\nseparate build of Tensorflow that works on Arm Macs like the M1.\n`install_tensorflow()` will detect if it is being run on an Arm Mac and\ninstall the appropriate Python packages (`tensorflow-macos` and\n`tensorflow-metal`). Note that on M1 Macs, conda is the only supported\ninstallation method. You can easily install a conda Python like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreticulate::install_miniconda()\ntensorflow::install_tensorflow()\n```\n:::\n\n\nNote that `install_miniconda()` automatically creates a conda\nenvironment named `r-reticulate`, that is the default environment used\nby reticulate.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}