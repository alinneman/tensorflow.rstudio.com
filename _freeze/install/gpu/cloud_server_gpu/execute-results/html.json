{
  "hash": "c64ad6768f10cd747f007514fbe606d3",
  "result": {
    "markdown": "---\ntitle: \"Cloud Server GPUs\"\noutput:\n  html_document:\n    toc_depth: 3\n    toc_float:\n        collapsed: false\ntype: docs\nmenu:\n  main:\n    name: \"Cloud Server\"\n    identifier: \"tools-cloud-server-gpu\"\n    parent: \"installation-gpu\"\n    weight: 40\naliases:\n  - /tools/cloud_server_gpu.html\n---\n\n\n\n\n## Overview\n\nCloud server instances with GPUs are available from services like Amazon EC2 and Google Compute Engine. You can use RStudio Server on these instances, making the development experience nearly identical to working locally.\n\n## Amazon EC2\n\nRStudio has AWS Marketplace offerings that are designed to provide stable, secure, and high performance execution environments for deep learning applications running on Amazon EC2. The tensorflow, tfestimators, and keras R packages (along with their pre-requisites, including the GPU version of TensorFlow) are installed as part of the image.\n\n### Launching the Server\n\nThere are AMIs on the Amazon Cloud Marketplace for both the open-source and Professional versions of RStudio Server. You can find them here:\n\n* [Open Source](https://aws.amazon.com/marketplace/pp/prodview-gpjb3cd2aemaw)\n\n* [Professional](https://aws.amazon.com/marketplace/pp/prodview-xnae5eufa3nkw)\n\nYou should launch these AMIs on the `p2.xlarge` instance type. This type includes a single GPU whereas other GPU-based images include up to 16 GPUs (however they are commensurately much more expensive). \n\n![](images/aws-launch.png){.illustration}\n\n### Accessing the Server\n\nAfter you've launched the server you can access an instance of [RStudio Server](https://www.rstudio.com/products/rstudio/download-server/) running on port 8787. For example:\n\n<http://ec2-18-217-204-43.us-east-2.compute.amazonaws.com:8787>\n\nNote that the above server address needs to be substituted for the public IP of the server you launched, which you can find in the EC2 Dashboard.\n\nThe first time you access the server you will be presented with a login screen:\n\n![](images/aws-login.png){.illustration}\n\nLogin with user id \"rstudio-user\" and password the instance ID of your AWS server (for example \"i-0a8ea329c18892dfa\", your specific ID is available via the EC2 dashboard).\n\nThen, use the RStudio Terminal to change the default password using the `passwd` utility:\n\n![](images/aws-passwd.png){.illustration}\n\nYour EC2 deep learning instance is now ready to use (the tensorflow and keras R packages along with their pre-requisites, including the GPU version of TensorFlow, are installed as part of the image).\n\nSee the sections below for discussion of various ways in which you can make your EC2 instance more secure.\n\n### Limiting Inbound Traffic\n\nThe EC2 instance is by default configured to allow access to SSH and HTTP traffic from all IP addresses on the internet, whereas it would be more desirable to restrict this to IP addresses that you know you will access the server from (this can however be challenging if you plan on accessing the server from a variety of public networks).\n\nYou can see these settings in the [Security Group](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html) of your EC2 instance:\n\n![](images/aws-security-group.png){.illustration}\n\nEdit the **Source** for the SSH and HTTP protocols to limit access to specific blocks of IP addresses.\n\n\n### Using HTTPS\n\nBy default the EC2 instance which you launched is accessed over HTTP, a non-encrypted channel. This means that data transmitted to the instance (including your username and password) can potentially be compromised during transmission.\n\nThere are many ways to add HTTPS support to a server including [AWS Elastic Load Balancing](https://aws.amazon.com/elasticloadbalancing/), [CloudFlare SSL](https://www.cloudflare.com/ssl/), and setting up reverse proxy from an [Nginx](https://www.nginx.com/resources/wiki/) or [Apache](https://httpd.apache.org/) web server configured with SSL support.\n\nThe details of adding HTTPS support to your server are beyond the scope of this article (see the links above to learn more). An alternative to this is to prohibit external HTTP connections entirely and access the server over an SSH Tunnel, this option is covered in the next section.\n\n### SSH Tunnel\n\nUsing an [SSH Tunnel](https://help.ubuntu.com/community/SSH/OpenSSH/PortForwarding) to access your EC2 instance provides a number of benefits, including:\n\n1) Use of the SSH authentication protocol to identify and authorize remote users\n\n2) Encrypting traffic that would otherwise be sent in the clear\n\nNote that SSH tunnel access as described below works only for Linux and OS X clients.\n\n#### Security Group\n\nTo use an SSH Tunnel with your EC2 instance, first configure the [Security Group](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html) of your instance to only accept SSH traffic (removing any HTTP entry that existed previously):\n\n![](images/aws-ssh-only.png){.illustration}\n\nNote that you may also want to restrict the **Source** of SSH traffic to the specific block of IP addresses you plan to access the server from.\n\n#### Server Configuration\n\nNext, connect to your instance over SSH (click the **Connect** button in the EC2 console for instructions specific to your server):\n\n```bash\nssh -i \"my-security-key.pem\" ubuntu@my-ec2-server-address\n```\n\n\nNote that if you copied and pasted the command from the EC2 console you may see this error message:\n\n```\nPlease login as the user \"ubuntu\" rather than the user \"root\".\n```\n\nIn that case be sure that you use `ubuntu@my-ec2-server-address` rather than `root@my-ec2-server-address`.\n\nExecute the following commands to configure RStudio Server to only accept local connections:\n\n```bash\n# Configure RStudio to only allow local connections\nsudo /bin/bash -c \"echo 'www-address=127.0.0.1' >> /etc/rstudio/rserver.conf\"\n\n# Restart RStudio with new settings\nsudo rstudio-server restart\n```\n\n#### Connecting to the Server\n\nYou should now be able to connect to the server via SSH tunnel as follows:\n\n```bash\nssh -N -L 8787:localhost:8787 -i my-security-key.pem ubuntu@my-ec2-server-address\n```\n\n(where `my-security-key.pem` and `my-ec2-server-address` are specific to your server configuration).\n\nOnce the SSH connection is established, RStudio Server will be available at <http://localhost:8787/>\n",
    "supporting": [
      "cloud_server_gpu_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}