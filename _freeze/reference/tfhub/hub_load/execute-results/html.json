{
  "hash": "6fe0d1343e0457379afee3f67cb4470b",
  "result": {
    "markdown": "---\nformat:\n  html:\n    css: /reference/assets/reference.css\n---\n\n\n| <button class=\"button\"> ![](/reference/assets/GitHub-Mark-32px.png){width=\"20\"} [View source on GitHub](https://github.com/rstudio/tfhub//blob/main/R/load.R) </button> | <button class=\"button\"> ![](/reference/assets/GitHub-Mark-32px.png){width=\"20\"} [Suggest edits on GitHub](https://github.com/rstudio/tfhub//edit/main/R/load.R) </button> |\n|:------------------------------:|:--------------------------------------:|\n\n*R/load.R*\n\n# hub_load\n\n## Hub Load\n\n## Description\nLoads a module from a handle. \n\n\n## Usage\n```r\nhub_load(handle, tags = NULL) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| handle | (string) the Module handle to resolve. |\n| tags | A set of strings specifying the graph variant to use, if loading from a v1 module. |\n\n## Details\n\nCurrently this method is fully supported only with Tensorflow 2.x and with modules created by calling `export_savedmodel`. The method works in both eager and graph modes. \n\nDepending on the type of handle used, the call may involve downloading a TensorFlow Hub module to a local cache location specified by the `TFHUB_CACHE_DIR` environment variable. If a copy of the module is already present in the TFHUB_CACHE_DIR, the download step is skipped. \n\nCurrently, three types of module handles are supported: 1) Smart URL resolvers such as tfhub.dev, e.g.: https://tfhub.dev/google/nnlm-en-dim128/1. 2) A directory on a file system supported by Tensorflow containing module files. This may include a local directory (e.g. /usr/local/mymodule) or a Google Cloud Storage bucket (gs://mymodule). 3) A URL pointing to a TGZ archive of a module, e.g. https://example.com/mymodule.tar.gz. \n\n\n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel <- hub_load('https://tfhub.dev/google/tf2-preview/mobilenet_v2/feature_vector/4') \n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}