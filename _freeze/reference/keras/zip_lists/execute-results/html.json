{
  "hash": "6c3bf53561f4cfc25ad1d9b7f8788ce8",
  "result": {
    "markdown": "---\nformat:\n  html:\n    css: /reference/assets/reference.css\n---\n\n\n| <button class=\"button\"> ![](/reference/assets/GitHub-Mark-32px.png){width=\"20\"} [View source on GitHub](https://github.com/rstudio/keras//blob/main/R/utils.R) </button> | <button class=\"button\"> ![](/reference/assets/GitHub-Mark-32px.png){width=\"20\"} [Suggest edits on GitHub](https://github.com/rstudio/keras//edit/main/R/utils.R) </button> |\n|:------------------------------:|:--------------------------------------:|\n\n*R/utils.R*\n\n# zip_lists\n\n## zip lists\n\n## Description\nThis is conceptually similar to `zip()` in Python, or R functions `purrr::transpose()` and `data.table::transpose()` (albeit, accepting elements in `...` instead of a single list), with one crucial difference: if the provided objects are named, then matching is done by names, not positions. \n\n\n## Usage\n```r\nzip_lists(...) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| ... | R lists or atomic vectors, optionally named. |\n\n## Details\nAll arguments supplied must be of the same length. If positional matching is required, then all arguments provided must be unnamed. If matching by names, then all arguments must have the same set of names, but they can be in different orders. \n\n\n## Value\nA inverted list \n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\ngradients <- list(\"grad_for_wt_1\", \"grad_for_wt_2\", \"grad_for_wt_3\") \nweights <- list(\"weight_1\", \"weight_2\", \"weight_3\") \nstr(zip_lists(gradients, weights)) \nstr(zip_lists(gradient = gradients, weight = weights)) \nnames(gradients) <- names(weights) <- paste0(\"layer_\", 1:3) \nstr(zip_lists(gradients, weights[c(3, 1, 2)])) \nnames(gradients) <- paste0(\"gradient_\", 1:3) \ntry(zip_lists(gradients, weights)) # error, names don't match \n# call unname directly for positional matching \nzip_lists(unname(gradients), unname(weights)) \n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}