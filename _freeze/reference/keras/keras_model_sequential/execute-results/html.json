{
  "hash": "a8135cb693974105173f50a4af56fa14",
  "result": {
    "markdown": "---\nformat:\n  html:\n    css: /reference/assets/reference.css\n---\n\n\n| <button class=\"button\"> ![](/reference/assets/GitHub-Mark-32px.png){width=\"20\"} [View source on GitHub](https://github.com/rstudio/keras//blob/main/R/model.R#L85) </button> |\n|:------------------------------:|:--------------------------------------:|\n\n# keras_model_sequential\n\n## Keras Model composed of a linear stack of layers\n\n## Description\nKeras Model composed of a linear stack of layers \n\n\n## Usage\n```r\nkeras_model_sequential(layers = NULL, name = NULL, ...) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| layers | List of layers to add to the model |\n| name | Name of model |\n| ... |   Arguments passed on to `sequential_model_input_layer`<br>  <br>    <br>`input_shape`<br>an integer vector of dimensions (not including the batch <br>    <br>`batch_size`<br>Optional input batch size (integer or NULL).<br>    <br>`dtype`<br>Optional datatype of the input. When not provided, the Keras <br>    <br>`input_tensor`<br>Optional tensor to use as layer input. If set, the layer <br>    <br>`sparse`<br>Boolean, whether the placeholder created is meant to be sparse. <br>    <br>`ragged`<br>Boolean, whether the placeholder created is meant to be ragged. <br>    <br>`type_spec`<br>A <br>    <br>`input_layer_name,name`<br>Optional name of the input layer (string).<br>   |\n\n\n\n\n## Note\n\nIf any arguments are provided to `...`, then the sequential model is initialized with a `InputLayer` instance. If not, then the first layer passed to a Sequential model should have a defined input shape. What that means is that it should have received an `input_shape` or `batch_input_shape`\n\nargument, or for some type of layers (recurrent, Dense...) an `input_dim`\n\nargument. \n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(keras) \nmodel <- keras_model_sequential() \nmodel %>% \n  layer_dense(units = 32, input_shape = c(784)) %>% \n  layer_activation('relu') %>% \n  layer_dense(units = 10) %>% \n  layer_activation('softmax') \nmodel %>% compile( \n  optimizer = 'rmsprop', \n  loss = 'categorical_crossentropy', \n  metrics = c('accuracy') \n) \n# alternative way to provide input shape \nmodel <- keras_model_sequential(input_shape = c(784)) %>% \n  layer_dense(units = 32) %>% \n  layer_activation('relu') %>% \n  layer_dense(units = 10) %>% \n  layer_activation('softmax') \n```\n:::\n\n\n## See Also\nOther model functions:  `compile.keras.engine.training.Model()`, `evaluate.keras.engine.training.Model()`, `evaluate_generator()`, `fit.keras.engine.training.Model()`, `fit_generator()`, `get_config()`, `get_layer()`, `keras_model()`, `multi_gpu_model()`, `pop_layer()`, `predict.keras.engine.training.Model()`, `predict_generator()`, `predict_on_batch()`, `predict_proba()`, `summary.keras.engine.training.Model()`, `train_on_batch()`\n\n",
    "supporting": [
      "keras_model_sequential_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}