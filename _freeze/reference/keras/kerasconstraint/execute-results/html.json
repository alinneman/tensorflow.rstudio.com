{
  "hash": "69e40d21e9c0712f2cbe84e3d08324c4",
  "result": {
    "markdown": "---\nexecute:\n  freeze: true\n---\n\n\n[R/constraints.R](https://github.com/rstudio/keras//blob/main/R/constraints.R#L127) \n\n# KerasConstraint\n\n## (Deprecated) Base R6 class for Keras constraints\n\n## Description\n New custom constraints are encouraged to subclass `keras$constraints$Constraint` directly. \n\n## Format\n An R6Class generator object \n\n\n\n## Details\n You can implement a custom constraint either by creating an R function that accepts a weights (`w`) parameter, or by creating an R6 class that derives from `KerasConstraint` and implements a `call` method. \n\n## Section\n\n## Methods\n\n   \n\n`call(w)`\n\nConstrain the specified weights.\n\n  \n\n\n## Note\n Models which use custom constraints cannot be serialized using `save_model_hdf5()`. Rather, the weights of the model should be saved and restored using `save_model_weights_hdf5()`. \n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(keras)\n \nCustomNonNegConstraint <- R6::R6Class( \n  \"CustomNonNegConstraint\", \n  inherit = KerasConstraint, \n  public = list( \n    call = function(x) { \n       w * k_cast(k_greater_equal(w, 0), k_floatx()) \n    } \n  ) \n) \n \nlayer_dense(units = 32, input_shape = c(784), \n            kernel_constraint = CustomNonNegConstraint$new()) \n```\n:::\n\n\n## See Also\n constraints \n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}