{
  "hash": "a9cec199a45cf54ca511481af8a409dc",
  "result": {
    "markdown": "---\nformat:\n  html:\n    css: /reference/assets/reference.css\n---\n\n\n| <button class=\"button\"> ![](/reference/assets/GitHub-Mark-32px.png){width=\"20\"} [View source on GitHub](https://github.com/rstudio/keras//blob/main/R/constraints.R) </button> | <button class=\"button\"> ![](/reference/assets/GitHub-Mark-32px.png){width=\"20\"} [Suggest edits on GitHub](https://github.com/rstudio/keras//edit/main/R/constraints.R) </button> |\n|:------------------------------:|:--------------------------------------:|\n\n*R/constraints.R*\n\n# KerasConstraint\n\n## (Deprecated) Base R6 class for Keras constraints\n\n## Description\nNew custom constraints are encouraged to subclass `keras$constraints$Constraint` directly. \n\n## Format\nAn R6Class generator object \n\n\n\n## Details\nYou can implement a custom constraint either by creating an R function that accepts a weights (`w`) parameter, or by creating an R6 class that derives from `KerasConstraint` and implements a `call` method. \n\n## Section\n\n## Methods\n\n`call(w)`\n\nConstrain the specified weights.\n\n\n## Note\nModels which use custom constraints cannot be serialized using `save_model_hdf5()`. Rather, the weights of the model should be saved and restored using `save_model_weights_hdf5()`. \n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nCustomNonNegConstraint <- R6::R6Class( \n  \"CustomNonNegConstraint\", \n  inherit = KerasConstraint, \n  public = list( \n    call = function(x) { \n       w * k_cast(k_greater_equal(w, 0), k_floatx()) \n    } \n  ) \n) \nlayer_dense(units = 32, input_shape = c(784), \n            kernel_constraint = CustomNonNegConstraint$new()) \n```\n:::\n\n\n## See Also\nconstraints\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}