{
  "hash": "9c9d315d7bcf1e80beda56226b030d7c",
  "result": {
    "markdown": "---\nexecute:\n  freeze: true\n---\n\n\n[R/model.R](https://github.com/rstudio/keras//blob/main/R/model.R#L33) \n\n# keras_model\n\n## Keras Model\n\n## Description\n A model is a directed acyclic graph of layers. \n\n\n## Usage\n```r\n \nkeras_model(inputs, outputs = NULL, ...) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| inputs | Input layer |\n| outputs | Output layer |\n| ... | Any additional arguments |\n\n\n\n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(keras) \n \n# input layer \ninputs <- layer_input(shape = c(784)) \n \n# outputs compose input + dense layers \npredictions <- inputs %>% \n  layer_dense(units = 64, activation = 'relu') %>% \n  layer_dense(units = 64, activation = 'relu') %>% \n  layer_dense(units = 10, activation = 'softmax') \n \n# create and compile model \nmodel <- keras_model(inputs = inputs, outputs = predictions) \nmodel %>% compile( \n  optimizer = 'rmsprop', \n  loss = 'categorical_crossentropy', \n  metrics = c('accuracy') \n) \n```\n:::\n\n\n## See Also\n Other model functions:  `compile.keras.engine.training.Model()`, `evaluate.keras.engine.training.Model()`, `evaluate_generator()`, `fit.keras.engine.training.Model()`, `fit_generator()`, `get_config()`, `get_layer()`, `keras_model_sequential()`, `multi_gpu_model()`, `pop_layer()`, `predict.keras.engine.training.Model()`, `predict_generator()`, `predict_on_batch()`, `predict_proba()`, `summary.keras.engine.training.Model()`, `train_on_batch()` \n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}