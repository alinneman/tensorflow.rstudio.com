{
  "hash": "10021790bf2dce2adfb1f44ae40d21b9",
  "result": {
    "markdown": "---\nformat:\n  html:\n    css: /reference/assets/reference.css\n---\n\n\n| <button class=\"button\"> ![](/reference/assets/GitHub-Mark-32px.png){width=\"20\"} [View source on GitHub](https://github.com/rstudio/keras//blob/main/R/applications.R) </button> | <button class=\"button\"> ![](/reference/assets/GitHub-Mark-32px.png){width=\"20\"} [Suggest edits on GitHub](https://github.com/rstudio/keras//edit/main/R/applications.R) </button> |\n|:------------------------------:|:--------------------------------------:|\n\n*R/applications.R*\n\n# application_vgg\n\n## VGG16 and VGG19 models for Keras.\n\n## Description\nVGG16 and VGG19 models for Keras. \n\n\n## Usage\n```r\napplication_vgg16( \n  include_top = TRUE, \n  weights = \"imagenet\", \n  input_tensor = NULL, \n  input_shape = NULL, \n  pooling = NULL, \n  classes = 1000, \n  classifier_activation = \"softmax\" \n) \napplication_vgg19( \n  include_top = TRUE, \n  weights = \"imagenet\", \n  input_tensor = NULL, \n  input_shape = NULL, \n  pooling = NULL, \n  classes = 1000, \n  classifier_activation = \"softmax\" \n) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| include_top | whether to include the 3 fully-connected layers at the top of the network. |\n| weights | One of `NULL` (random initialization), `'imagenet'` (pre-training on ImageNet), or the path to the weights file to be loaded. Defaults to `'imagenet'`. |\n| input_tensor | Optional Keras tensor (i.e. output of `layer_input()`) to use as image input for the model. |\n| input_shape | optional shape list, only to be specified if `include_top`<br>is FALSE (otherwise the input shape has to be `(224, 224, 3)` It should have exactly 3 inputs channels, and width and height should be no smaller than 32. E.g. `(200, 200, 3)` would be one valid value. |\n| pooling | Optional pooling mode for feature extraction when `include_top` is `FALSE`. Defaults to `NULL`. <br>- `NULL` means that the output of the model will be the 4D tensor output of the last convolutional layer. <br>- `'avg'` means that global average pooling will be applied to the output of the last convolutional layer, and thus the output of the model will be a 2D tensor. <br>- `'max'` means that global max pooling will be applied.  |\n| classes | Optional number of classes to classify images into, only to be specified if `include_top` is TRUE, and if no `weights` argument is specified. Defaults to 1000 (number of ImageNet classes). |\n| classifier_activation | A string or callable. The activation function to use on the \"top\" layer. Ignored unless `include_top = TRUE`. Set `classifier_activation = NULL` to return the logits of the \"top\" layer. Defaults to `'softmax'`. When loading pretrained weights, `classifier_activation` can only be `NULL` or `\"softmax\"`. |\n\n## Details\n\nOptionally loads weights pre-trained on ImageNet. \n\nThe `imagenet_preprocess_input()` function should be used for image preprocessing. \n\n## Section\n\n## Reference\n\n - [Very Deep Convolutional Networks for Large-Scale Image Recognition](https://arxiv.org/abs/1409.1556)\n\n## Value\nKeras model instance. \n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(keras) \nmodel <- application_vgg16(weights = 'imagenet', include_top = FALSE) \nimg_path <- \"elephant.jpg\" \nimg <- image_load(img_path, target_size = c(224,224)) \nx <- image_to_array(img) \nx <- array_reshape(x, c(1, dim(x))) \nx <- imagenet_preprocess_input(x) \nfeatures <- model %>% predict(x) \n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}