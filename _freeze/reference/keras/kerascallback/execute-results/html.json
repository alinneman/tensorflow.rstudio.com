{
  "hash": "9c279ce461172b895be0f3f623f7d91b",
  "result": {
    "markdown": "---\nexecute:\n  freeze: true\n---\n\n\n[R/callbacks.R](https://github.com/rstudio/keras//blob/main/R/callbacks.R#L605) \n\n# KerasCallback\n\n## (Deprecated) Base R6 class for Keras callbacks\n\n## Description\n New custom callbacks implemented as R6 classes are encouraged to inherit from `keras$callbacks$Callback` directly. \n\n## Format\n An R6Class generator object \n\n\n\n## Details\n\n The `logs` named list that callback methods take as argument will contain keys for quantities relevant to the current batch or epoch.  Currently, the `fit.keras.engine.training.Model()` method for sequential models will include the following quantities in the `logs` that it passes to its callbacks:  \n\n- `on_epoch_end`: logs include `acc` and `loss`, and optionally include `val_loss` (if validation is enabled in `fit`), and `val_acc` (if validation and accuracy monitoring are enabled). \n\n- `on_batch_begin`: logs include `size`, the number of samples in the current batch. \n\n- `on_batch_end`: logs include `loss`, and optionally `acc` (if accuracy monitoring is enabled). \n\n \n\n## Section\n\n## Fields\n\n   \n\n`params`\n\nNamed list with training parameters (eg. verbosity, batch size, number of epochs...).\n\n \n\n \n\n`model`\n\nReference to the Keras model being trained.\n\n \n\n## Methods\n\n   \n\n`on_epoch_begin(epoch, logs)`\n\nCalled at the beginning of each epoch.\n\n \n\n`on_epoch_end(epoch, logs)`\n\nCalled at the end of each epoch.\n\n \n\n`on_batch_begin(batch, logs)`\n\nCalled at the beginning of each batch.\n\n \n\n`on_batch_end(batch, logs)`\n\nCalled at the end of each batch.\n\n \n\n`on_train_begin(logs)`\n\nCalled at the beginning of training.\n\n \n\n`on_train_end(logs)`\n\nCalled at the end of training.\n\n  \n\n## Value\n KerasCallback. \n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(keras) \n \nLossHistory <- R6::R6Class(\"LossHistory\", \n  inherit = KerasCallback, \n \n  public = list( \n \n    losses = NULL, \n \n    on_batch_end = function(batch, logs = list()) { \n      self$losses <- c(self$losses, logs[[\"loss\"]]) \n    } \n  ) \n) \n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}