{
  "hash": "f4da388b80c7a770bd1e4d26e6e62762",
  "result": {
    "markdown": "---\nformat:\n  html:\n    css: /reference/assets/reference.css\n---\n\n\n| <button class=\"button\"> ![](/reference/assets/GitHub-Mark-32px.png){width=\"20\"} [View source on GitHub](https://github.com/rstudio/keras//blob/main/R/model.R) </button> | <button class=\"button\"> ![](/reference/assets/GitHub-Mark-32px.png){width=\"20\"} [Suggest edits on GitHub](https://github.com/rstudio/keras//edit/main/R/model.R) </button> |\n|:------------------------------:|:--------------------------------------:|\n\n*R/model.R*\n\n# multi_gpu_model\n\n## (Deprecated) Replicates a model on different GPUs.\n\n## Description\n(Deprecated) Replicates a model on different GPUs. \n\n\n## Usage\n```r\nmulti_gpu_model(model, gpus = NULL, cpu_merge = TRUE, cpu_relocation = FALSE) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| model | A Keras model instance. To avoid OOM errors, this model could have been built on CPU, for instance (see usage example below). |\n| gpus | `NULL` to use all available GPUs (default). Integer >= 2 or list of integers, number of GPUs or list of GPU IDs on which to create model replicas. |\n| cpu_merge | A boolean value to identify whether to force merging model weights under the scope of the CPU or not. |\n| cpu_relocation | A boolean value to identify whether to create the model's weights under the scope of the CPU. If the model is not defined under any preceding device scope, you can still rescue it by activating this option. |\n\n## Details\n\nSpecifically, this function implements single-machine multi-GPU data parallelism. It works in the following way: \n\n- Divide the model's input(s) into multiple sub-batches. \n\n- Apply a model copy on each sub-batch. Every model copy is executed on a dedicated GPU. \n\n- Concatenate the results (on CPU) into one big batch. \n\nE.g. if your `batch_size` is 64 and you use `gpus=2`, then we will divide the input into 2 sub-batches of 32 samples, process each sub-batch on one GPU, then return the full batch of 64 processed samples. \n\nThis induces quasi-linear speedup on up to 8 GPUs. \n\nThis function is only available with the TensorFlow backend for the time being. \n\n## Section\n\n## Model Saving\n\nTo save the multi-gpu model, use `save_model_hdf5()` or `save_model_weights_hdf5()` with the template model (the argument you passed to `multi_gpu_model`), rather than the model returned by `multi_gpu_model`. \n\n## Value\nA Keras model object which can be used just like the initial `model` argument, but which distributes its workload on multiple GPUs. \n\n## Note\n\nThis function is deprecated and has been removed from tensorflow on 2020-04-01. To distribute your training across all available GPUS, you can use `tensorflow::tf$distribute$MirroredStrategy()`\n\nby creating your model like this: \n\n```\n\nstrategy <- tensorflow::tf$distribute$MirroredStrategy() \n\nwith(strategy$scope(), { \n\n  model <- application_xception( \n\n    weights = NULL, \n\n    input_shape = c(height, width, 3), \n\n    classes = num_classes \n\n}) \n\n```\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(keras) \nlibrary(tensorflow) \nnum_samples <- 1000 \nheight <- 224 \nwidth <- 224 \nnum_classes <- 1000 \n# Instantiate the base model (or \"template\" model). \n# We recommend doing this with under a CPU device scope, \n# so that the model's weights are hosted on CPU memory. \n# Otherwise they may end up hosted on a GPU, which would \n# complicate weight sharing. \nwith(tf$device(\"/cpu:0\"), { \n  model <- application_xception( \n    weights = NULL, \n    input_shape = c(height, width, 3), \n    classes = num_classes \n  ) \n}) \n# Replicates the model on 8 GPUs. \n# This assumes that your machine has 8 available GPUs. \nparallel_model <- multi_gpu_model(model, gpus = 8) \nparallel_model %>% compile( \n  loss = \"categorical_crossentropy\", \n  optimizer = \"rmsprop\" \n) \n# Generate dummy data. \nx <- array(runif(num_samples * height * width*3), \n           dim = c(num_samples, height, width, 3)) \ny <- array(runif(num_samples * num_classes), \n           dim = c(num_samples, num_classes)) \n# This `fit` call will be distributed on 8 GPUs. \n# Since the batch size is 256, each GPU will process 32 samples. \nparallel_model %>% fit(x, y, epochs = 20, batch_size = 256) \n# Save model via the template model (which shares the same weights): \nmodel %>% save_model_hdf5(\"my_model.h5\") \n```\n:::\n\n\n## See Also\nOther model functions:  `compile.keras.engine.training.Model()`, `evaluate.keras.engine.training.Model()`, `evaluate_generator()`, `fit.keras.engine.training.Model()`, `fit_generator()`, `get_config()`, `get_layer()`, `keras_model_sequential()`, `keras_model()`, `pop_layer()`, `predict.keras.engine.training.Model()`, `predict_generator()`, `predict_on_batch()`, `predict_proba()`, `summary.keras.engine.training.Model()`, `train_on_batch()`\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}