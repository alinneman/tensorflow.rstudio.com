{
  "hash": "0fb9b0a6e21b720f9aef4a4e093fe386",
  "result": {
    "markdown": "---\nformat:\n  html:\n    css: /reference/assets/reference.css\n---\n\n\n| <button class=\"button\"> ![](/reference/assets/GitHub-Mark-32px.png){width=\"20\"} [View source on GitHub](https://github.com/rstudio/tfdatasets//blob/main/R/dataset_methods.R) </button> | <button class=\"button\"> ![](/reference/assets/GitHub-Mark-32px.png){width=\"20\"} [Suggest edits on GitHub](https://github.com/rstudio/tfdatasets//edit/main/R/dataset_methods.R) </button> |\n|:------------------------------:|:--------------------------------------:|\n\n*R/dataset_methods.R*\n\n# dataset_rejection_resample\n\n## A transformation that resamples a dataset to a target distribution.\n\n## Description\nA transformation that resamples a dataset to a target distribution. \n\n\n## Usage\n```r\ndataset_rejection_resample( \n  dataset, \n  class_func, \n  target_dist, \n  initial_dist = NULL, \n  seed = NULL, \n  name = NULL \n) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| dataset | A `tf.Dataset` |\n| class_func | A function mapping an element of the input dataset to a scalar `tf.int32` tensor. Values should be in `[0, num_classes)`. |\n| target_dist | A floating point type tensor, shaped `[num_classes]`. |\n| initial_dist | (Optional.) A floating point type tensor, shaped `[num_classes]`. If not provided, the true class distribution is estimated live in a streaming fashion. |\n| seed | (Optional.) Integer seed for the resampler. |\n| name | (Optional.) A name for the tf.data operation. |\n\n\n\n## Value\nA `tf.Dataset`\n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\ninitial_dist <- c(.5, .5) \ntarget_dist <- c(.6, .4) \nnum_classes <- length(initial_dist) \nnum_samples <- 100000 \ndata <- sample.int(num_classes, num_samples, prob = initial_dist, replace = TRUE) \ndataset <- tensor_slices_dataset(data) \ntally <- c(0, 0) \n`add<-` <- function (x, value) x + value \n# tfautograph::autograph({ \n#   for(i in dataset) \n#     add(tally[as.numeric(i)]) <- 1 \n# }) \ndataset %>% \n  as_array_iterator() %>% \n  iterate(function(i) { \n    add(tally[i]) <<- 1 \n  }, simplify = FALSE) \n# The value of `tally` will be close to c(50000, 50000) as \n# per the `initial_dist` distribution. \ntally # c(50287, 49713) \ntally <- c(0, 0) \ndataset %>% \n  dataset_rejection_resample( \n    class_func = function(x) (x-1) %% 2, \n    target_dist = target_dist, \n    initial_dist = initial_dist \n  ) %>% \n  as_array_iterator() %>% \n  iterate(function(element) { \n    names(element) <- c(\"class_id\", \"i\") \n    add(tally[element$i]) <<- 1 \n  }, simplify = FALSE) \n# The value of tally will be now be close to c(75000, 50000) \n# thus satisfying the target_dist distribution. \ntally # c(74822, 49921) \n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}