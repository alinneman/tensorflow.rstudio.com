{
  "hash": "868ebbdf2aed2f92c855867cc7ccc304",
  "result": {
    "markdown": "---\nformat:\n  html:\n    css: /reference/assets/reference.css\n---\n\n\n| <button class=\"button\"> ![](/reference/assets/GitHub-Mark-32px.png){width=\"20\"} [View source on GitHub](https://github.com/rstudio/tfdatasets//blob/main/R/dataset_methods.R#L547) </button> |\n|:------------------------------:|:--------------------------------------:|\n\n# dataset_interleave\n\n## Maps map_func across this dataset, and interleaves the results\n\n## Description\nMaps map_func across this dataset, and interleaves the results \n\n\n## Usage\n```r\ndataset_interleave(dataset, map_func, cycle_length, block_length = 1) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| dataset | A dataset |\n| map_func | A function mapping a nested structure of tensors (having shapes and types defined by `output_shapes()` and `output_types()` to a dataset. |\n| cycle_length | The number of elements from this dataset that will be processed concurrently. |\n| block_length | The number of consecutive elements to produce from each input element before cycling to another input element. |\n\n## Details\nThe `cycle_length` and `block_length` arguments control the order in which elements are produced. `cycle_length` controls the number of input elements that are processed concurrently. In general, this transformation will apply `map_func` to `cycle_length` input elements, open iterators on the returned dataset objects, and cycle through them producing `block_length` consecutive elements from each iterator, and consuming the next input element each time it reaches the end of an iterator. \n\n\n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tfdatasets)\ndataset <- tensor_slices_dataset(c(1,2,3,4,5)) %>% \n dataset_interleave(cycle_length = 2, block_length = 4, function(x) { \n   tensors_dataset(x) %>% \n     dataset_repeat(6) \n }) \n# resulting dataset (newlines indicate \"block\" boundaries): \nc(1, 1, 1, 1, \n  2, 2, 2, 2, \n  1, 1, \n  2, 2, \n  3, 3, 3, 3, \n  4, 4, 4, 4, \n  3, 3, \n  4, 4, \n  5, 5, 5, 5, \n  5, 5, \n) \n```\n:::\n\n\n## See Also\nOther dataset methods:  `dataset_batch()`, `dataset_cache()`, `dataset_collect()`, `dataset_concatenate()`, `dataset_decode_delim()`, `dataset_filter()`, `dataset_map_and_batch()`, `dataset_map()`, `dataset_padded_batch()`, `dataset_prefetch_to_device()`, `dataset_prefetch()`, `dataset_reduce()`, `dataset_repeat()`, `dataset_shuffle_and_repeat()`, `dataset_shuffle()`, `dataset_skip()`, `dataset_take_while()`, `dataset_take()`, `dataset_window()`\n\n",
    "supporting": [
      "dataset_interleave_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}