{
  "hash": "31624a5e5b68120436236197f7e94215",
  "result": {
    "markdown": "---\nexecute:\n  freeze: true\n---\n\n\n[R/dataset_iterators.R](https://github.com/rstudio/tfdatasets//blob/main/R/dataset_iterators.R#L111) \n\n# with_dataset\n\n## Execute code that traverses a dataset\n\n## Description\n Execute code that traverses a dataset \n\n\n## Usage\n```r\n \nwith_dataset(expr) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| expr | Expression to execute |\n\n## Details\n When a dataset iterator reaches the end, an out of range runtime error will occur. You can catch and ignore the error when it occurs by wrapping your iteration code in a call to `with_dataset()` (see the example below for an illustration). \n\n\n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tfdatasets) \ndataset <- text_line_dataset(\"mtcars.csv\", record_spec = mtcars_spec) %>% \n  dataset_prepare(x = c(mpg, disp), y = cyl) %>% \n  dataset_batch(128) %>% \n  dataset_repeat(10) \n \niter <- make_iterator_one_shot(dataset) \nnext_batch <- iterator_get_next(iter) \n \nwith_dataset({ \n  while(TRUE) { \n    batch <- sess$run(next_batch) \n    # use batch$x and batch$y tensors \n  } \n}) \n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}