{
  "hash": "9cbda3e9422ad6db850202404b8be493",
  "result": {
    "markdown": "---\nexecute:\n  freeze: true\n---\n\n\n[R/dataset_methods.R](https://github.com/rstudio/tfdatasets//blob/main/R/dataset_methods.R#L1279) \n\n# dataset_scan\n\n## A transformation that scans a function across an input dataset\n\n## Description\n A transformation that scans a function across an input dataset \n\n\n## Usage\n```r\n \ndataset_scan(dataset, initial_state, scan_func) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| dataset | A tensorflow dataset |\n| initial_state | A nested structure of tensors, representing the initial state of the accumulator. |\n| scan_func | A function that maps `(old_state, input_element)` to `(new_state, output_element)`. It must take two arguments and return a pair of nested structures of tensors. The `new_state` must match the structure of `initial_state`. |\n\n## Details\n This transformation is a stateful relative of `dataset_map()`. In addition to mapping `scan_func` across the elements of the input dataset, `scan()` accumulates one or more state tensors, whose initial values are `initial_state`. \n\n\n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tfdatasets)\n \ninitial_state <- as_tensor(0, dtype=\"int64\") \nscan_func <- function(state, i) list(state + i, state + i) \ndataset <- range_dataset(0, 10) %>% \n  dataset_scan(initial_state, scan_func) \n \nreticulate::iterate(dataset, as.array) %>% \n  unlist() \n# 0  1  3  6 10 15 21 28 36 45 \n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}