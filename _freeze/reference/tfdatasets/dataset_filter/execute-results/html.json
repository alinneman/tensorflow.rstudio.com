{
  "hash": "a0eb781f6e0cce402dc7a5086c370a3b",
  "result": {
    "markdown": "---\nformat:\n  html:\n    css: /reference/assets/reference.css\n---\n\n\n| <button class=\"button\"> ![](/reference/assets/GitHub-Mark-32px.png){width=\"20\"} [View source on GitHub](https://github.com/rstudio/tfdatasets//blob/main/R/dataset_methods.R) </button> | <button class=\"button\"> ![](/reference/assets/GitHub-Mark-32px.png){width=\"20\"} [Suggest edits on GitHub](https://github.com/rstudio/tfdatasets//edit/main/R/dataset_methods.R) </button> |\n|:------------------------------:|:--------------------------------------:|\n\n*R/dataset_methods.R*\n\n# dataset_filter\n\n## Filter a dataset by a predicate\n\n## Description\nFilter a dataset by a predicate \n\n\n## Usage\n```r\ndataset_filter(dataset, predicate) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| dataset | A dataset |\n| predicate | A function mapping a nested structure of tensors (having shapes and types defined by `output_shapes()` and `output_types()` to a scalar `tf$bool` tensor. |\n\n## Details\nNote that the functions used inside the predicate must be tensor operations (e.g. `tf$not_equal`, `tf$less`, etc.). R generic methods for relational operators (e.g. `<`, `>`, `<=`, etc.) and logical operators (e.g. `!`, `&`, `|`, etc.) are provided so you can use shorthand syntax for most common comparisions (this is illustrated by the example below). \n\n\n## Value\nA dataset composed of records that matched the predicate. \n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\ndataset <- text_line_dataset(\"mtcars.csv\", record_spec = mtcars_spec) %>% \n  dataset_filter(function(record) { \n    record$mpg >= 20 \n}) \ndataset <- text_line_dataset(\"mtcars.csv\", record_spec = mtcars_spec) %>% \n  dataset_filter(function(record) { \n    record$mpg >= 20 & record$cyl >= 6L \n  }) \n```\n:::\n\n\n## See Also\nOther dataset methods:  `dataset_batch()`, `dataset_cache()`, `dataset_collect()`, `dataset_concatenate()`, `dataset_decode_delim()`, `dataset_interleave()`, `dataset_map_and_batch()`, `dataset_map()`, `dataset_padded_batch()`, `dataset_prefetch_to_device()`, `dataset_prefetch()`, `dataset_reduce()`, `dataset_repeat()`, `dataset_shuffle_and_repeat()`, `dataset_shuffle()`, `dataset_skip()`, `dataset_take_while()`, `dataset_take()`, `dataset_window()`\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}