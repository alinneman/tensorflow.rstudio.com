{
  "hash": "2ba7ad4259a163b834842579d3ba5dd6",
  "result": {
    "markdown": "---\nexecute:\n  freeze: true\n---\n\n\n[R/jobs.R](NULL/blob/main/R/jobs.R#L42) \n\n# cloudml_train\n\n## Train a model using Cloud ML\n\n## Description\n Upload a TensorFlow application to Google Cloud, and use that application to train a model. \n\n\n## Usage\n```r\n \ncloudml_train(file = \"train.R\", master_type = NULL, flags = NULL, \n  region = NULL, config = NULL, collect = \"ask\", dry_run = FALSE) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| file | File to be used as entrypoint for training. |\n| master_type | Training master node machine type. \"standard\" provides a basic machine configuration suitable for training simple models with small to moderate datasets. See the documentation at [https://cloud.google.com/ml-engine/docs/tensorflow/machine-types#machine_type_table](https://cloud.google.com/ml-engine/docs/tensorflow/machine-types#machine_type_table) for details on available machine types. |\n| flags | Named list with flag values (see `flags()`) or path to YAML file containing flag values. |\n| region | The region to be used for training. |\n| config | A list, `YAML` or `JSON` configuration file as described [https://cloud.google.com/ml-engine/reference/rest/v1/projects.jobs](https://cloud.google.com/ml-engine/reference/rest/v1/projects.jobs). |\n| collect | Logical. If TRUE, collect job when training is completed (blocks waiting for the job to complete). The default (`\"ask\"`) will interactively prompt the user whether to collect the results or not. |\n| dry_run | Triggers a local dry run over the deployment phase to validate packages and packing work as expected. |\n\n\n\n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(cloudml) \n \ngcloud_install() \njob <- cloudml_train(\"train.R\") \n```\n:::\n\n\n## See Also\n `job_status()`, `job_collect()`, `job_cancel()`  Other CloudML functions: `cloudml_deploy`,   `cloudml_predict` \n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}