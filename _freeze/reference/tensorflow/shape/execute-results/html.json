{
  "hash": "80bc4a7c923daef5cd214440231dc516",
  "result": {
    "markdown": "---\nformat:\n  html:\n    css: /reference/assets/reference.css\n---\n\n\n| <button class=\"button\"> ![](/reference/assets/GitHub-Mark-32px.png){width=\"20\"} [View source on GitHub](https://github.com/rstudio/tensorflow//blob/main/R/shape.R#L105) </button> |\n|:------------------------------:|:--------------------------------------:|\n\n# shape\n\n## Create a `tf.TensorShape` object\n\n## Description\nCreate a `tf.TensorShape` object \n\n\n## Usage\n```r\nshape(..., dims = list(...)) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| ... | Tensor dimensions as integers or `NULL` for an unknown dimensions. `NA` and `-1` are synonyms for `NULL`. |\n| dims | Tensor dimensions as a vector. |\n\n\n\n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tensorflow)\n# --- construct --- \nshape()       # tf.TensorShape()       # scalar \nshape(NULL)   # tf.TensorShape([None]) # 1-D array of unknown length \nshape(NA)     # tf.TensorShape([None]) # 1-D array of unknown length, NA is a synonym for NULL \nshape(dims = NULL) # TensorShape(None)    # Unknown rank, unknown size \nshape(3, 4)        # TensorShape([3, 4])  # 2-D array (matrix) with 3 rows, 4 columns \nshape(NA, 4)           # TensorShape([None, 4])  # 2-D array (matrix) with unknown rows, 4 columns \nshape(dims = c(NA, 4)) # TensorShape([None, 4]) # same as above; bypass ... and pass dims directly \n# --- inspect --- \nlength(shape(dims = NULL)) # NA_integer_ \nlength(shape(1,2,3,NA))    # 4L \n# ---convert --- \nx <- shape(dims = list(3L, 5L)) \nas.list(x)     # list(3L, 5L) \nas.integer(x)  # c(3L, 5L) \nas.numeric(x)  # c(3, 5) \nas.double(x)   # c(3, 5) # alias for as.numeric \nas_tensor(x)   # tf.Tensor([3 5], shape=(2,), dtype=int32) \n# convert partially undefined shapes \nx <- shape(NA, 3) \nas.list(x)     # list(NULL, 3L) \nas.integer(x)  # c(NA, 3L) \nas_tensor(x)   # tf.Tensor([-1  3], shape=(2,), dtype=int32) # unspecified dims default is -1 \n# as_tensor() converts undefined dimensions to -1, which is useful for \n# tf functions that only accept tensors for shapes, e.g, \ntf$reshape(tf$zeros(shape(8)), \n           as_tensor(shape(NA, 4))) \n# tf.Tensor([[0. 0. 0. 0.] \n#            [0. 0. 0. 0.]], shape=(2, 4), dtype=float32) \n# converting fully unknown shapes raises an error \ntry(as.list(shape(dims = NULL))) # ValueError: as_list() is not defined on an unknown TensorShape. \n# test for rank first if this a concern: \nas.list_or_null <- function(x) if(is.na(length(x))) NULL else as.list(x) \nas.list_or_null(shape(dims = NULL)) \n# --- compare --- \n# Fully known shapes return TRUE if and only if each element is equal \nshape(3, 4) == shape(3, 4) # TRUE \nshape(3, 4) == shape(4, 4) # FALSE \n# two unknown dimensions are treated as equal \nshape(NA, 4) == shape(NA, 4) # TRUE \nshape(NA, 4) == shape(3, 4)  # FALSE \n# Two unknown shapes, return TRUE \nshape(dims = NULL) == shape(dims = NULL) # TRUE \n# Comparing an unknown shape to a partially or fully defined shape returns FALSE \nshape(dims = NULL) == shape(NULL) # FALSE \nshape(dims = NULL) == shape(4)    # FALSE \nvalues of length greater than one supplied to `...`  are automatically flattened \nshape(1, c(2, 3), 4) # shape(1, 2, 3, 4) \nshape(1, shape(2, 3), 4) # shape(1, 2, 3, 4) \nshape(1, as_tensor(2, 3), 4) # shape(1, 2, 3, 4) \n# --- extract or replace --- \n# regular R-list semantics for `[`, `[[`, `[<-`, `[[<-` \nx <- shape(1, 2, 3) \nx[1]       # TensorShape([1]) \nx[[1]]     # 1L \nx[2:3]     # TensorShape([2, 3]) \nx[-1]      # TensorShape([2, 3]) \nx[1] <- 11        ; x # TensorShape([11, 2, 3]) \nx[1] <- shape(11) ; x # TensorShape([11, 2, 3]) \nx[1] <- list(11)  ; x # TensorShape([11, 2, 3]) \nx[[1]] <- 22            ; x # TensorShape([22, 2, 3]) \nx[1:2] <- c(NA, 99)     ; x # TensorShape([None, 99, 3]) \nx[1:2] <- shape(33, 44) ; x # TensorShape([33, 44, 3]) \n# --- concatenate --- \nc(shape(1), shape(2, 3), shape(4, NA)) # TensorShape([1, 2, 3, 4, None]) \n# --- merge --- \nmerge(shape(NA, 2), \n      shape(1 , 2)) # TensorShape([1, 2]) \ntry(merge(shape(2, 2), \n          shape(1, 2))) # ValueError: Shapes (2, 2) and (1, 2) are not compatible \nrm(x) # cleanup \n```\n:::\n\n\n## See Also\n[https://www.tensorflow.org/api_docs/python/tf/TensorShape](https://www.tensorflow.org/api_docs/python/tf/TensorShape)\n\n",
    "supporting": [
      "shape_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}