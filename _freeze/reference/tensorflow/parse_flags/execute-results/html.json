{
  "hash": "5a11e209f0778e36f6ef86c46c3c6bfa",
  "result": {
    "markdown": "---\nexecute:\n  freeze: true\n---\n\n\n[R/flags.R](https://github.com/rstudio/tensorflow//blob/main/R/flags.R#L47) \n\n# parse_flags\n\n## Parse Configuration Flags for a TensorFlow Application\n\n## Description\n Parse configuration flags for a TensorFlow application. Use this to parse and unify the configuration(s) specified through a `flags.yml` configuration file, alongside other arguments set through the command line. \n\n\n## Usage\n```r\n \nparse_flags( \n  config = Sys.getenv(\"R_CONFIG_ACTIVE\", unset = \"default\"), \n  file = \"flags.yml\", \n  arguments = commandArgs(TRUE) \n) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| config | The configuration to use. Defaults to the active configuration for the current environment (as specified by the `R_CONFIG_ACTIVE` environment variable), or `default` when unset. |\n| file | The configuration file to read. |\n| arguments | The command line arguments (as a character vector) to be parsed. |\n\n\n\n## Value\n A named `R` list, mapping configuration keys to values. \n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tensorflow)\n \n# examine an example configuration file provided by tensorflow \nfile <- system.file(\"examples/config/flags.yml\", package = \"tensorflow\") \ncat(readLines(file), sep = \"\\n\") \n \n# read the default configuration \nFLAGS <- tensorflow::parse_flags(\"default\", file = file) \nstr(FLAGS) \n \n# read the alternate configuration: note that \n# the default configuration is inherited, but \n# we override the 'string' configuration here \nFLAGS <- tensorflow::parse_flags(\"alternate\", file = file) \nstr(FLAGS) \n \n# override configuration values using command \n# line arguments (normally, these would be \n# passed in through the command line invocation \n# used to start the process) \nFLAGS <- tensorflow::parse_flags( \n  \"alternate\", \n  file = file, \n  arguments = c(\"--foo=1\") \n) \nstr(FLAGS) \n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}