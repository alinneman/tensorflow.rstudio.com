{
  "hash": "09e1ddb2af85eadfc2abb4d558432d4f",
  "result": {
    "markdown": "---\nformat:\n  html:\n    css: /reference/assets/reference.css\n---\n\n\n| <button class=\"button\"> ![](/reference/assets/GitHub-Mark-32px.png){width=\"20\"} [View source on GitHub](https://github.com/rstudio/tensorflow//blob/main/R/extract.R#L) </button> |\n|:------------------------------:|:--------------------------------------:|\n\n# [.tensorflow.tensor\n\n## Subset tensors with `[`\n\n## Description\nSubset tensors with `[`\n\n\n## Usage\n```r\n## S3 method for class 'tensorflow.tensor'\n[( \n  x, \n  ..., \n  drop = TRUE, \n  style = getOption(\"tensorflow.extract.style\"), \n  options = tf_extract_opts(style) \n) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| x | Tensorflow tensor |\n| ... | slicing specs. See examples and details. |\n| drop | whether to drop scalar dimensions |\n| style | One of `\"python\"` or `\"R\"`. |\n| options | An object returned by `tf_extract_opts()` |\n\n\n\n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tensorflow)\nx <- as_tensor(array(1:15, dim = c(3, 5))) \nx \n# by default, numerics supplied to [...] are interpreted R style \nx[,1]    # first column \nx[1:2,]  # first two rows \nx[,1, drop = FALSE] # 1 column matrix \n# strided steps can be specified in R syntax or python syntax \nx[, seq(1, 5, by = 2)] \nx[, 1:5:2] \n# if you are unfamiliar with python-style strided steps, see: \n# https://numpy.org/doc/stable/reference/arrays.indexing.html#basic-slicing-and-indexing \n# missing arguments for python syntax are valid, but they must by backticked \n# or supplied as NULL \nx[, `::2`] \nx[, NULL:NULL:2] \nx[, `2:`] \n# all_dims() expands to the shape of the tensor \n# (equivalent to a python ellipsis `...`) \n# (not to be confused with R dots `...`) \ny <- as_tensor(array(1:(3^5), dim = c(3,3,3,3,3))) \nall.equal(y[all_dims(), 1], \n          y[, , , , 1]) \n# tf$newaxis are valid (equivalent to a NULL) \nx[,, tf$newaxis] \nx[,, NULL] \n# negative numbers are always interpreted python style \n# The first time a negative number is supplied to `[`, a warning is issued \n# about the non-standard behavior. \nx[-1,]  # last row, with a warning \nx[-1,]  # the warning is only issued once \n# specifying `style = 'python'` changes the following: \n# +  zero-based indexing is used \n# +  slice sequences in the form of `start:stop` do not include `stop` \n#    in the returned value \n# +  out-of-bounds indices in a slice are valid \n# The style argument can be supplied to individual calls of `[` or set \n# as a global option \n# example of zero based  indexing \nx[0, , style = 'python']  # first row \nx[1, , style = 'python']  # second row \n# example of slices with exclusive stop \noptions(tensorflow.extract.style = 'python') \nx[, 0:1]  # just the first column \nx[, 0:2]  # first and second column \n# example of out-of-bounds index \nx[, 0:10] \noptions(tensorflow.extract.style = NULL) \n# slicing with tensors is valid too, but note, tensors are never \n# translated and are always interpreted python-style. \n# A warning is issued the first time a tensor is passed to `[` \nx[, tf$constant(0L):tf$constant(2L)] \n# just as in python, only scalar tensors are valid \n# https://www.tensorflow.org/api_docs/python/tf/Tensor#__getitem__ \n# To silence the warnings about tensors being passed as-is and negative numbers \n# being interpreted python-style, set \noptions(tensorflow.extract.style = 'R') \n# clean up from examples \noptions(tensorflow.extract.style = NULL) \n```\n:::\n",
    "supporting": [
      "sub-.tensorflow.tensor_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}