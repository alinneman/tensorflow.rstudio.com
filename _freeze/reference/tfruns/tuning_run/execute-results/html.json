{
  "hash": "a77bebc44e5ad14d35c6d1850cbfabdc",
  "result": {
    "markdown": "---\nformat:\n  html:\n    css: /reference/assets/reference.css\n---\n\n\n| <button class=\"button\"> ![](/reference/assets/GitHub-Mark-32px.png){width=\"20\"} [View source on GitHub](https://github.com/rstudio/tfruns//blob/main/R/training_run.R) </button> | <button class=\"button\"> ![](/reference/assets/GitHub-Mark-32px.png){width=\"20\"} [Suggest edits on GitHub](https://github.com/rstudio/tfruns//edit/main/R/training_run.R) </button> |\n|:------------------------------:|:--------------------------------------:|\n\n*R/training_run.R*\n\n# tuning_run\n\n## Tune hyperparameters using training flags\n\n## Description\nRun all combinations of the specifed training flags. The number of combinations can be reduced by specifying the `sample` parameter, which will result in a random sample of the flag combinations being run. \n\n\n## Usage\n```r\ntuning_run( \n  file = \"train.R\", \n  context = \"local\", \n  config = Sys.getenv(\"R_CONFIG_ACTIVE\", unset = \"default\"), \n  flags = NULL, \n  sample = NULL, \n  properties = NULL, \n  runs_dir = getOption(\"tfruns.runs_dir\", \"runs\"), \n  artifacts_dir = getwd(), \n  echo = TRUE, \n  confirm = interactive(), \n  envir = parent.frame(), \n  encoding = getOption(\"encoding\") \n) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| file | Path to training script (defaults to \"train.R\") |\n| context | Run context (defaults to \"local\") |\n| config | The configuration to use. Defaults to the active configuration for the current environment (as specified by the `R_CONFIG_ACTIVE`<br>environment variable), or `default` when unset. |\n| flags | Either a named list with flag values (multiple values can be provided for each flag) or a data frame that contains pre-generated combinations of flags (e.g. via `base::expand.grid()`). The latter can be useful for subsetting combinations. See 'Examples'. |\n| sample | Sampling rate for flag combinations (defaults to running all combinations). |\n| properties | Named character vector with run properties. Properties are additional metadata about the run which will be subsequently available via `ls_runs()`. |\n| runs_dir | Directory containing runs. Defaults to \"runs\" beneath the current working directory (or to the value of the `tfruns.runs_dir` R option if specified). |\n| artifacts_dir | Directory to capture created and modified files within. Pass `NULL` to not capture any artifcats. |\n| echo | Print expressions within training script |\n| confirm | Confirm before executing tuning run. |\n| envir | The environment in which the script should be evaluated |\n| encoding | The encoding of the training script; see `file()`. |\n\n\n\n## Value\nData frame with summary of all training runs performed during tuning. \n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tfruns) \n# using a list as input to the flags argument \nruns <- tuning_run( \n  system.file(\"examples/mnist_mlp/mnist_mlp.R\", package = \"tfruns\"), \n  flags = list( \n    dropout1 = c(0.2, 0.3, 0.4), \n    dropout2 = c(0.2, 0.3, 0.4) \n  ) \n) \nruns[order(runs$eval_acc, decreasing = TRUE), ] \n# using a data frame as input to the flags argument \n# resulting in the same combinations above, but remove those \n# where the combined dropout rate exceeds 1 \ngrid <- expand.grid( \n  dropout1 = c(0.2, 0.3, 0.4), \n  dropout2 = c(0.2, 0.3, 0.4) \n) \ngrid$combined_droput <- grid$dropout1 + grid$dropout2 \ngrid <- grid[grid$combined_droput <= 1, ] \nruns <- tuning_run( \n  system.file(\"examples/mnist_mlp/mnist_mlp.R\", package = \"tfruns\"), \n  flags = grid[, c(\"dropout1\", \"dropout2\")] \n) \n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}