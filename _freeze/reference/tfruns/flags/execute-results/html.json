{
  "hash": "8aad89c84af8fc3e74c5366a8c97a7b6",
  "result": {
    "markdown": "---\nformat:\n  html:\n    css: /reference/assets/reference.css\n---\n\n\n| <button class=\"button\"> ![](/reference/assets/GitHub-Mark-32px.png){width=\"20\"} [View source on GitHub](https://github.com/rstudio/tfruns//blob/main/R/flags.R#L49) </button> |\n|:------------------------------:|:--------------------------------------:|\n\n# flags\n\n## Flags for a training run\n\n## Description\nDefine the flags (name, type, default value, description) which paramaterize a training run. Optionally read overrides of the default values from a \"flags.yml\" config file and/or command line arguments. \n\n\n## Usage\n```r\nflags( \n  ..., \n  config = Sys.getenv(\"R_CONFIG_ACTIVE\", unset = \"default\"), \n  file = \"flags.yml\", \n  arguments = commandArgs(TRUE) \n) \n\nflag_numeric(name, default, description = NULL) \n\nflag_integer(name, default, description = NULL) \n\nflag_boolean(name, default, description = NULL) \n\nflag_string(name, default, description = NULL) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| ... | One or more flag definitions |\n| config | The configuration to use. Defaults to the active configuration for the current environment (as specified by the `R_CONFIG_ACTIVE`<br>environment variable), or `default` when unset. |\n| file | The flags YAML file to read |\n| arguments | The command line arguments (as a character vector) to be parsed. |\n| name | Flag name |\n| default | Flag default value |\n| description | Flag description |\n\n\n## Section\n\n## Config File Flags\n\nConfig file flags are defined a YAML configuration file (by default named \"flags.yml\"). Flags can either appear at the top-level of the YAML or can be inclued in named configuration sections (see the [config package](https://github.com/rstudio/config) for details). \n\n## Command Line Flags\n\nCommand line flags should be of the form `--key=value` or `--key value`. The values are assumed to be valid `yaml` and will be converted using `yaml.load()`. \n\n## Value\nNamed list of training flags \n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tfruns) \n# define flags and parse flag values from flags.yml and the command line \nFLAGS <- flags( \n  flag_numeric('learning_rate', 0.01, 'Initial learning rate.'), \n  flag_integer('max_steps', 5000, 'Number of steps to run trainer.'), \n  flag_string('data_dir', 'MNIST-data', 'Directory for training data'), \n  flag_boolean('fake_data', FALSE, 'If true, use fake data for testing') \n) \n```\n:::\n",
    "supporting": [
      "flags_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}