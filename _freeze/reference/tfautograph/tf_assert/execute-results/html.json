{
  "hash": "cb308c7711a1ef337fade702e3f033f6",
  "result": {
    "markdown": "---\nformat:\n  html:\n    css: /reference/assets/reference.css\n---\n\n\n| <button class=\"button\"> ![](/reference/assets/GitHub-Mark-32px.png){width=\"20\"} [View source on GitHub](https://github.com/t-kalinowski/tfautograph//blob/main/R/tf_assert.R) </button> | <button class=\"button\"> ![](/reference/assets/GitHub-Mark-32px.png){width=\"20\"} [Suggest edits on GitHub](https://github.com/t-kalinowski/tfautograph//edit/main/R/tf_assert.R) </button> |\n|:------------------------------:|:--------------------------------------:|\n\n*R/tf_assert.R*\n\n# tf_assert\n\n## tf_assert\n\n## Description\n\nA thin wrapper around `tf$Assert()` that automatically constructs an informative error message (passed on to `data` argument), which includes the expression passed to `condition`, the values of the symbols found in the expression, as well as the full R call stack at the time the `tf$Assert()`\n\nnode is created. \n\n\n## Usage\n```r\ntf_assert( \n  condition, \n  ..., \n  expr = substitute(condition), \n  summarize = NULL, \n  name = NULL \n) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| condition | A boolean tensor |\n| ... | Additional elements passed on to `data`. (e.g, an informative error message as a string, additional tensor values that might be useful to have in the error message, etc.) |\n| expr | A language object, provided in case `condition` is already computed prior to the call |\n| summarize | Print this many entries of each tensor. |\n| name | A name for this operation (optional). |\n\n\n\n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- tf$constant(-1) \ntry(tf_assert(x > 0, \"oopsies! x must be greater than 0\")) \n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}