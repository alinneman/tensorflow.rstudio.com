{
  "hash": "222a008d181b7005740d216e690a4673",
  "result": {
    "markdown": "---\nexecute:\n  freeze: true\n---\n\n\n[R/tf-ctrl-flow-wrappers.R](https://github.com/t-kalinowski/tfautograph//blob/main/R/tf-ctrl-flow-wrappers.R#L180) \n\n# tf_switch\n\n## tf.switch_case\n\n## Description\n tf.switch_case \n\n\n## Usage\n```r\n \ntf_switch( \n  branch_index, \n  ..., \n  branch_fns = list(...), \n  default = NULL, \n  name = \"switch_case\" \n) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| branch_index | an integer tensor |\n| ..., branch_fns | a list of function bodies specified with a `~`, optionally supplied with a branch index on the left hand side. See examples |\n| default | A function defined with a `~`, or something coercible via `as.function()`` |\n| name | a string, passed on to `tf.switch_case()` |\n\n\n\n## Value\n The result from `tf.switch_case()` \n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tfautograph)\n \ntf_pow <- tf_function(function(x, pow) { \n   tf_switch(pow, \n   0 ~ 1, \n   1 ~ x, \n   2 ~ x * x, \n   3 ~ x * x * x, \n   default = ~ -1) \n}) \n \n# can optionally also omit the left hand side int, in which case the order of \n# the functions is used. \ntf_pow <- function(x, pow) { \n  tf_switch(pow, \n            ~ 1, \n            ~ x, \n            ~ x * x, \n            ~ x * x * x, \n            default = ~ -1) \n} \n \n# supply just some of the ints to override the default order \ntf_pow <- function(x, pow) { \n  tf_switch(pow, \n            3 ~ x * x * x, \n            2 ~ x * x, \n            ~ 1, \n            ~ x, \n            default = ~ -1) \n} \n \n# A slightly less contrived example: \ntf_norm <- tf_function(function(x, l) { \n  tf_switch(l, \n            0 ~ tf$reduce_sum(tf$cast(x != 0, tf$float32)), # L0 norm \n            1 ~ tf$reduce_sum(tf$abs(x)),                   # L1 norm \n            2 ~ tf$sqrt(tf$reduce_sum(tf$square(x))),       # L2 norm \n            default = ~ tf$reduce_max(tf$abs(x)))         # L-infinity norm \n}) \n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}