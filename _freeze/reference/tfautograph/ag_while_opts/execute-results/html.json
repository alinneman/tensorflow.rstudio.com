{
  "hash": "44d846f57c49d87a8380059c4d553245",
  "result": {
    "markdown": "---\nexecute:\n  freeze: true\n---\n\n\n[R/opts.R](https://github.com/t-kalinowski/tfautograph//blob/main/R/opts.R#L60) \n\n# ag_while_opts\n\n## specify `tf.while_loop` options\n\n## Description\n See https://www.tensorflow.org/versions/r2.0/api_docs/python/tf/while_loop for additional details. \n\n\n## Usage\n```r\n \nag_while_opts( \n  ..., \n  shape_invariants = NULL, \n  parallel_iterations = 10L, \n  back_prop = TRUE, \n  swap_memory = FALSE, \n  maximum_iterations = NULL \n) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| ... | Ignored, used to ensure all arguments supplied are named. |\n| shape_invariants | The shape invariants for the loop variables. |\n| parallel_iterations | The number of iterations allowed to run in parallel. It must be a positive integer. |\n| back_prop | Deprecated (optional). `FALSE` disables support for back propagation. Prefer using `tf$stop_gradient` instead. |\n| swap_memory | Whether GPU-CPU memory swap is enabled for this loop. |\n| maximum_iterations | Optional maximum number of iterations of the while loop to run. If provided, the `cond` output is AND-ed with an additional condition ensuring the number of iterations executed is no greater than `maximum_iterations`. |\n\n\n\n## Value\n `NULL`` invisibly, called for it's side effect. \n\n## Note\n Use `ag_name()` to supply `name` and `ag_loop_vars()` to supply `loop_vars` directly.  This is only applicable when autograph in graph mode, otherwise this has no effect. \n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tfautograph)\n \n## use tf_function() to enter graph mode: \ntf_function(autograph(function(n) { \n  ag_name(\"silly-example\") \n  ag_while_opts(back_prop = FALSE) \n  while(n > 0) \n    n <- n - 1 \n})) \n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}