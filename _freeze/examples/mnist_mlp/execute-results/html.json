{
  "hash": "4f82ec86aad75a2b057a60f82d1bfae7",
  "result": {
    "markdown": "---\ntitle: mnist_mlp\ndescription: Trains a simple deep multi-layer perceptron on the MNIST dataset.\n---\n\nTrains a simple deep NN on the MNIST dataset.\n\nGets to 98.40% test accuracy after 20 epochs\n(there is *a lot* of margin for parameter tuning).\n2 seconds per epoch on a K520 GPU.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(keras)\n\n# Data Preparation ---------------------------------------------------\n\nbatch_size <- 128\nnum_classes <- 10\nepochs <- 30\n\n# The data, shuffled and split between train and test sets\nc(c(x_train, y_train), c(x_test, y_test)) %<-% dataset_mnist()\n\nx_train <- array_reshape(x_train, c(nrow(x_train), 784))\nx_test <- array_reshape(x_test, c(nrow(x_test), 784))\n\n# Transform RGB values into [0,1] range\nx_train <- x_train / 255\nx_test <- x_test / 255\n\ncat(nrow(x_train), 'train samples\\n')\ncat(nrow(x_test), 'test samples\\n')\n\n# Convert class vectors to binary class matrices\ny_train <- to_categorical(y_train, num_classes)\ny_test <- to_categorical(y_test, num_classes)\n\n# Define Model --------------------------------------------------------------\n\nmodel <- keras_model_sequential()\nmodel %>% \n  layer_dense(units = 256, activation = 'relu', input_shape = c(784)) %>% \n  layer_dropout(rate = 0.4) %>% \n  layer_dense(units = 128, activation = 'relu') %>%\n  layer_dropout(rate = 0.3) %>%\n  layer_dense(units = 10, activation = 'softmax')\n\nsummary(model)\n\nmodel %>% compile(\n  loss = 'categorical_crossentropy',\n  optimizer = optimizer_rmsprop(),\n  metrics = c('accuracy')\n)\n\n# Training & Evaluation ----------------------------------------------------\n\n# Fit model to data\nhistory <- model %>% fit(\n  x_train, y_train,\n  batch_size = batch_size,\n  epochs = epochs,\n  verbose = 1,\n  validation_split = 0.2\n)\n\nplot(history)\n  \nscore <- model %>% evaluate(\n  x_test, y_test,\n  verbose = 0\n)\n\n# Output metrics\ncat('Test loss:', score[[1]], '\\n')\ncat('Test accuracy:', score[[2]], '\\n')\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}