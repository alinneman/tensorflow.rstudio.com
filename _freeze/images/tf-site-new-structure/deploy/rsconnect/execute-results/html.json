{
  "hash": "2ec088a3fd045ec726f58b92ee886718",
  "result": {
    "markdown": "---\ntitle: \"Deploying a TensorFlow Model to RStudio Connect\"\ntype: docs\nmenu:\n  main:\n    name: \"RStudio Connect\"\n    identifier: \"deploy-rsconnect\"\n    parent: \"deploy-top\"\n    weight: 50\neditor_options: \n  chunk_output_type: console\n---\n\n\nIn this tutorial you will learn how to deploy a TensorFlow model to [RStudio Connect](https://rstudio.com/products/connect/). RStudio Connect uses [TensorFlow\nServing](https://github.com/tensorflow/serving) for performance but makes it \nmuch easier for R users to manage their deployment.\n\n## Building the model\n\nThe first thing we are going to do is to build our model.\nWe will use the Keras API to build this model.\n\nWe will use the MNIST dataset to build our model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(keras)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nError in reticulate::use_virtualenv(\"r-tensorflow-site\", required = TRUE) : \n  Directory ~/.virtualenvs/r-tensorflow-site is not a Python virtualenv\n```\n:::\n\n```{.r .cell-code}\nlibrary(tensorflow)\nmnist <- dataset_mnist()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoaded Tensorflow version 2.9.1\n```\n:::\n\n```{.r .cell-code}\nmnist$train$x <- (mnist$train$x/255) %>% \n  array_reshape(., dim = c(dim(.), 1))\n\nmnist$test$x <- (mnist$test$x/255) %>% \n  array_reshape(., dim = c(dim(.), 1))\n```\n:::\n\n\nNow, we are going to define our Keras model, it will be a simple convolutional neural \nnetwork.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel <- keras_model_sequential() %>% \n  layer_conv_2d(filters = 16, kernel_size = c(3,3), activation = \"relu\") %>% \n  layer_max_pooling_2d(pool_size = c(2,2)) %>% \n  layer_conv_2d(filters = 16, kernel_size = c(3,3), activation = \"relu\") %>% \n  layer_max_pooling_2d(pool_size = c(2,2)) %>% \n  layer_flatten() %>% \n  layer_dense(units = 128, activation = \"relu\") %>% \n  layer_dense(units = 10, activation = \"softmax\")\n\nmodel %>% \n  compile(\n    loss = \"sparse_categorical_crossentropy\",\n    optimizer = \"adam\",\n    metrics = \"accuracy\"\n  )\n```\n:::\n\n\nNext, we fit the model using the MNIST dataset:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel %>% \n  fit(\n    x = mnist$train$x, y = mnist$train$y,\n    batch_size = 32,\n    epochs = 5,\n    validation_sample = 0.2,\n    verbose = 2\n  )\n```\n:::\n\n\nWhen we are happy with our model accuracy in the validation dataset we can `evaluate` \nthe results on the test dataset with:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel %>% evaluate(x = mnist$test$x, y = mnist$test$y, verbose = 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      loss   accuracy \n0.03619112 0.98839998 \n```\n:::\n:::\n\n\nOK, we have 99% accuracy on the test dataset and we want to deploy that model.\nFirst, let's save the model in the `SavedModel` format using:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsave_model_tf(model, \"cnn-mnist\")\n```\n:::\n\n\nWith the model built and saved we can now start building our plumber API file.\n\n## Deployiong to RStudio Connect\n\nOnce the model is saved to the SavedModel format, the model can be deployed with\na single line of code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrsconnect::deployTFModel(\"cnn-mnist/\")\n```\n:::\n\n\nWhen the deployment is complete you will be redirected to your browser with some\ninstructions on how to call the REST endpoint:\n\n![](../images/rsc.png) \n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}