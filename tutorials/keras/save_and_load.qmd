---
title: Save and load
aliases:
  - ../beginners/basic-ml/tutorial_save_and_restore/index.html
  - ../../articles/tutorial_save_and_restore.html
---

Model progress can be saved during and after training. This means a model can resume where it left off and avoid long training times. Saving also means you can share your model and others can recreate your work. When publishing research models and techniques, most machine learning practitioners share:

* code to create the model, and
* the trained weights, or parameters, for the model

Sharing this data helps others understand how the model works and try it themselves with new data.

Caution: TensorFlow models are code and it is important to be careful with untrusted code. See [Using TensorFlow Securely](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for details.

### Options

There are different ways to save TensorFlow models depending on the API you're using. This guide uses [Keras](/guides/keras), a high-level API to build and train models in TensorFlow. For other approaches see the TensorFlow [Save and Restore](/guides/keras/saved_model) guide or [Saving in eager](https://www.tensorflow.org/guide/eager#object-based_saving).

## Setup

```{r setup}
library(tensorflow)
library(keras)
```

### Get an example dataset

To demonstrate how to save and load weights, you'll use the [MNIST dataset](http://yann$lecun.com/exdb/mnist/). To speed up these runs, use the first 1000 examples:

```{r}
c(c(train_images, train_labels), c(test_images, test_labels)) %<-% dataset_mnist()

train_labels <- train_labels[1:1000]
test_labels <- test_labels[1:1000]

train_images <- train_images[1:1000,,] %>% array_reshape(dim = c(1000, 784))/255
test_images <- test_images[1:1000,,] %>% array_reshape(dim = c(1000, 784))/255
```

### Define a model

Start by building a simple sequential model:

```{r}
# Define a simple sequential model
create_model <- function() {
  model <- keras_model_sequential() %>% 
    layer_dense(512, activation = 'relu', input_shape = shape(784)) %>% 
    layer_dropout(0.2) %>% 
    layer_dense(10)
  
  model %>% compile(
    optimizer = 'adam',
    loss = loss_sparse_categorical_crossentropy(from_logits = TRUE),
    metrics = list(metric_sparse_categorical_accuracy())
  )
  
  model
}

# Create a basic model instance
model <- create_model()

# Display the model's architecture
summary(model)
```

## Save checkpoints during training

You can use a trained model without having to retrain it, or pick-up training where you left off in case the training process was interrupted. The `callback_model_checkpoint()` callback allows you to continually save the model both *during* and at *the end* of training.

### Checkpoint callback usage

Create a `callback_model_checkpoint()` callback that saves weights only during training:

```{r}
checkpoint_path <- "training_1/cp.ckpt"
checkpoint_dir <- fs::path_dir(checkpoint_path)

# Create a callback that saves the model's weights
cp_callback <- callback_model_checkpoint(
  filepath = checkpoint_path,
  save_weights_only = TRUE,
  verbose = 1
)

# Train the model with the new callback
model %>% fit(
  train_images, 
  train_labels,  
  epochs = 10,
  validation_data = list(test_images, test_labels),
  callbacks = list(cp_callback) # Pass callback to training
)  

# This may generate warnings related to saving the state of the optimizer.
# These warnings (and similar warnings throughout this notebook)
# are in place to discourage outdated usage, and can be ignored.
```

This creates a single collection of TensorFlow checkpoint files that are updated at the end of each epoch:

```{r}
fs::dir_tree(checkpoint_dir)
```

As long as two models share the same architecture you can share weights between them. So, when restoring a model from weights-only, create a model with the same architecture as the original model and then set its weights. 

Now rebuild a fresh, untrained model and evaluate it on the test set. An untrained model will perform at chance levels (~10% accuracy):

```{r}
# Create a basic model instance
model <- create_model()

# Evaluate the model
untrained_results <- model %>% evaluate(test_images, test_labels, verbose = 2)
cat("Untrained model results: \n")
untrained_results
```

Then load the weights from the checkpoint and re-evaluate:

```{r}
# Loads the weights
load_model_weights_tf(model, checkpoint_path)

# Re-evaluate the model
restored_model <- model %>% evaluate(test_images, test_labels, verbose = 2)
cat("Restored model results: \n")
restored_model
```

### Checkpoint callback options

The callback provides several options to provide unique names for checkpoints and adjust the checkpointing frequency.
Train a new model, and save uniquely named checkpoints once every five epochs:

```{r}
# Include the epoch in the file name 
checkpoint_path <- "training_2/cp-list{epoch:04d}.ckpt"
checkpoint_dir <- fs::path_dir(checkpoint_path)

batch_size <- 32

# Create a callback that saves the model's weights every 5 epochs
cp_callback <- callback_model_checkpoint(
  filepath = checkpoint_path,
  verbose = 1,
  save_weights_only = TRUE,
  save_freq = 5*batch_size
)

# Create a new model instance
model <- create_model()

# Train the model with the new callback
model %>% fit(
  train_images, 
  train_labels,
  epochs = 50, 
  batch_size = batch_size, 
  callbacks = list(cp_callback),
  validation_data = list(test_images, test_labels),
  verbose = 0
)
```

Now, look at the resulting checkpoints and choose the latest one:

```{r}
fs::dir_tree(checkpoint_dir)
```

```{r}
latest <- tf$train$latest_checkpoint(checkpoint_dir)
latest
```

Note: the default TensorFlow format only saves the 5 most recent checkpoints.
To test, reset the model and load the latest checkpoint:

```{r}
# Create a new model instance
model <- create_model()

# Load the previously saved weights
load_model_weights_tf(model, latest)

# Re-evaluate the model
model %>% evaluate(test_images, test_labels, verbose = 0)
```

## What are these files?

The above code stores the weights to a collection of [checkpoint](../../guide/checkpoint.qmd)-formatted files that contain only the trained weights in a binary format. Checkpoints contain:
* One or more shards that contain your model's weights.
* An index file that indicates which weights are stored in which shard.

If you are training a model on a single machine, you'll have one shard with(the suffix, {    }) `.data-00000-of-00001`

## Manually save weights

To save weights manually, use `save_model_weights_tf()`. By default, Keras —and the `save_model_weights_tf()` method in particular—uses the TensorFlow [Checkpoint](../../guide/checkpoint.qmd) format with a `.ckpt` extension. To save in the HDF5 format with a `.h5` extension, refer to the [Save and load models](/guides/keras/save_and_serialize) guide.

```{r}
# Save the weights
save_model_weights_tf(model, './checkpoints/my_checkpoint')

# Create a new model instance
model <- create_model()

# Restore the weights
load_model_weights_tf(model, './checkpoints/my_checkpoint')

# Evaluate the model
restored_model <- model %>% evaluate(test_images, test_labels, verbose = 2)
cat("Restored model results: \n")
restored_model
```

## Save the entire model

Call `save_model_tf()` to save a model's architecture, weights, and training configuration in a single file/folder. This allows you to export a model so it can be used without access to the original Python code*. Since the optimizer-state is recovered, you can resume training from exactly where you left off.

An entire model can be saved in two different file formats (`SavedModel` and `HDF5`). The TensorFlow `SavedModel` format is the default file format in TF2$x. However, models can be saved in `HDF5` format. More details on saving entire models in the two file formats is described below.

Saving a fully-functional model is very useful—you can load them in TensorFlow.js ([Saved Model](https://www.tensorflow.org/js/tutorials/conversion/import_saved_model), [HDF5](https://www.tensorflow.org/js/tutorials/conversion/import_keras)) and then train and run them in web browsers, or convert them to run on mobile devices using TensorFlow Lite ([Saved Model](https://www.tensorflow.org/lite/convert/python_api#converting_a_savedmodel_), [HDF5](https://www.tensorflow.org/lite/convert/python_api#converting_a_keras_model_))

\*Custom objects (e.g. subclassed models or layers) require special attention when saving and loading. See the **Saving custom objects** section below 

### SavedModel format

The SavedModel format is another way to serialize models. Models saved in this format can be restored using `load_model_tf()` and are compatible with TensorFlow Serving. The [SavedModel guide](https://www.tensorflow.org/guide/saved_model) goes into detail about how to serve/inspect the SavedModel. The section below illustrates the steps to save and restore the model.

```{r}
# Create and train a new model instance.
model <- create_model()
model %>% fit(train_images, train_labels, epochs = 5)

# Save the entire model as a SavedModel.
save_model_tf(model, "saved_model/my_model")
```

The SavedModel format is a directory containing a protobuf binary and a TensorFlow checkpoint. Inspect the saved model directory:

```{r}
# my_model directory
# Contains an assets folder, saved_model.pb, and variables folder.
fs::dir_tree("saved_model/")
```

Reload a fresh Keras model from the saved model:

```{r}
new_model <- load_model_tf('saved_model/my_model')

# Check its architecture
summary(new_model)
```

The restored model is compiled with the same arguments as the original model. Try running evaluate and predict with the loaded model.

```{r}
# Evaluate the restored model
restored_model <- new_model %>% evaluate(test_images, test_labels, verbose = 2)
restored_model

dim(predict(new_model, test_images))
```

### HDF5 format


Keras provides a basic save format using the [HDF5](https://en.wikipedia.org/wiki/Hierarchical_Data_Format) standard. 

```{r}
# Create and train a new model instance.
model <- create_model()
model %>% fit(train_images, train_labels, epochs = 5)

# Save the entire model to a HDF5 file.
# The '.h5' extension indicates that the model should be saved to HDF5.
save_model_hdf5(model, 'my_model.h5') 
```

Now, recreate the model from that file:

```{r}
# Recreate the exact same model, including its weights and the optimizer
new_model <- load_model_hdf5('my_model.h5')

# Show the model architecture
summary(new_model)
```

Check its accuracy:

```{r}
new_model %>% evaluate(test_images, test_labels, verbose = 0)
```

Keras saves models by inspecting their architectures. This technique saves everything:

* The weight values
* The model's architecture
* The model's training configuration (what you pass to the `compile()` method)
* The optimizer and its state, if any (this enables you to restart training where you left off)

Keras is not able to save the `v1$x` optimizers (from `tf.compat$v1$train`) since they aren't compatible with checkpoints. For v1$x optimizers, you need to re-compile the model after loading—losing the state of the optimizer.

### Saving custom objects

If you are using the SavedModel format, you can skip this section. The key difference between HDF5 and SavedModel is that HDF5 uses object configs to save the model architecture, while SavedModel saves the execution graph. Thus, SavedModels are able to save custom objects like subclassed models and custom layers without requiring the original code.

To save custom objects to HDF5, you must do the following:

1. Define a `get_config` method in your object, and optionally a `from_config` classmethod.
  * `get_config(self)` returns a JSON-serializable dictionary of parameters needed to recreate the object.
  * `from_config(cls, config)` uses the returned config from `get_config` to create a new object. By default, this function will use the config as initialization kwargs (`return do.call(cls, config)`).
2. Pass the object to the `custom_objects` argument when loading the model. The argument must be a dictionary mapping the string class name to the Python class. Eg. `load_model_tf(path, custom_objects = list('CustomLayer'= CustomLayer))`

See the [Writing layers and models from scratch](/guides/keras/custom_layers_and_models) tutorial for examples of custom objects and `get_config`.
