---
format: html
---

## Environment Details

::: {.callout-note appearance="simple" collapse="true"}
### Tensorflow Version

```{r}
tensorflow::tf_config()
```
:::

::: {.callout-note appearance="simple" collapse="true"}
### R Environment Information

```{r}
sessionInfo()
```
:::

::: {.callout-note appearance="simple" collapse="true"}
### Python Environment Information

```{r}
system2(reticulate::py_exe(), c("-m pip freeze"), stdout = TRUE) |> writeLines()
```
:::

::: {.callout-note appearance="simple" collapse="true"}
### Additional Information

```{r, echo = FALSE, results='hold'}
pt <- 4
pretty_proc_time <- function(type = "elapsed") {
  pt <- proc.time()[[type]]
  duration <-
    list(
      weeks = 0,
      days = 0,
      hours = 0,
      minutes = 0,
      seconds = 0
    )
  if (duration$weeks <- (pt %/% 604800))
    # 7d * 24h * 60m * 60x
    pt <- pt %% 604800
  if (duration$days <- (pt %/% 86400))
    pt <- pt %% 86400
  if (duration$hours <- (pt %/% 3600))
    pt <- pt %% 3600
  if (duration$minutes <- (pt %/% 60))
    pt <- pt %% 60
  duration$seconds <- pt

  for (unit in names(duration)) {
    if (!duration[[unit]])
      duration[[unit]] <- NULL
    else
      break
  }

  out <- sprintf("%i %s", as.integer(duration), names(duration))
  if (length(out) > 1)
    out <- paste(c(paste(out[-length(out)], collapse = ", "),
                   out[length(out)]), collapse = " and ")
  out
}
# system("nvidia-smi")

cat("TF Devices:\n")
for (dev in tensorflow::tf$config$list_physical_devices())
  cat("- ", format(dev), "\n")
cat("CPU cores:", parallel::detectCores(), "\n")
cat("Date rendered:", format(Sys.Date()), "\n")
cat(sprintf("Page render time: %s\n", pretty_proc_time()))
```
:::
